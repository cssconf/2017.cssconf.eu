---
talk_id: the-road-to-styled-components
---

JESSICA:  Thank you. All right, in our next talk, which is the last talk in this block of talks, we have glen who we're going to give a big, huge round of applause for, because he has sprinted in the last day to make a talk for us on style components. How are you feeling?
GLEN:  Awful. It's going to be rubbish. Absolute garbage.
JESSICA:  Do you remember your first Tweet?
GLEN:  I do not.
JESSICA:  You said to the world what you were drinking the "Twitter-ade".
GLEN:  That's clever for me on my Twitter!
JESSICA:  All right, everyone, a huge round of applause for Glen!  [Applause].
GLEN:  Thank you very much. This is really happening, isn't it!  Has Jessica said, Max was originally going to give this talk. He had to pull out for family reasons. Him and I have worked really closely for about a year on a project at CSS and JavaScript project called style components and he asked, and the organisers here asked, if I might be able to fill in. Which is daunting.
I've only had about 24 hours to prepare, so I please ask your forgiveness for the general improvisational tone of my presentation today. I knew there was a lot of stuff that Max wanted to talk to you about, share with you, see your reaction to and get your feedback on, so I thought if I could come up here, I could potentially do that. Obviously, I'm not going to be able to do what Max was going to do, but what I thought I could do and get prepared in a day is talk about my own perspective on the work that we both have done. My own journey in working in CSS and JavaScript. Hopefully, along the way, covering everything that Max wanted to tell you using his slides.
I thought I would introduce myself. I'm Glen, from Australia, from Melbourne, like Mark who just spoke. If you were here 18 months ago, I was talking about a project that Mark and I worked on called CSS modules. These days, I am much more involved in style components, and, in fact, that is my main focus. I've become a strong believer in CSS and JavaScript for a lot of the same reasons that Mark just explained. I think it is a place of real innovation and it is really exciting. I wanted to try and convey am so of the things that I thought was important when I've been working on it and why I think you may potentially want to get involved as well.
I was trying to figure out what the summary of Max's talk was going to be. I thought I would start with the conclusion, which is that I think what we are all saying is that CSS and JavaScript is worth looking at if you haven't yet. It is worth your time, the investment in developing your skills and forming your own opinions about whether it is right for you. It is potentially only recently become a real candidate for use in your own projects, but I think it is there now. Max and I came to working on this project together, last year. Max is heavily integrated into the React community by I find myself more like I'm trying to get my CSS to work. Between the two of us, it felt like maybe we were going to stumble upon an API that might work. In order to tell you about why style components is the way that it is, I thought I would start by the component end of it. I think the idea of building a UI in terms of components is I think pretty much we all accept it is a best practice, but I don't think it is self-evident that it would be the case. So I thought if we talk a little bit about what makes a good component, why component-driven development is actually useful, it will help understand why style components is the way that it is.
Yes, so one of the thanks you could say, you could cast at the feet of components is that it breaks the separation of concerns. You could consider CSS, HTML and JavaScript to be 100 per cent separate concerns, and, for the browser's purposes, they actually are. They handle different, cache differently, they have different performance profiles, some block rendering, some don't. But, as an author, as you're developing these UIs, I'm not convinced that technological lines are necessarily the concerns in which you should be separating on. For me, components are a better separation concerns because they encapsulate a unit and a functionality. If you're talking to your designers, talking to your customers about what you've build, then you're talking in functional units or visual units, not in terms of this one has JavaScript, this one doesn't.
One of the things I like about encapsulation or I at least like talking about encapsulation is the primary purpose of components is that it really emphasises the importance of what you call your components, what you name them and what their properties are. That to me is the real benefit to working with this stuff.
So, let me show you what I mean. If you've got a button component here.
The button component, button DS Claim renders out a button with a type of submit, and passes through the class name. Now this is a React example but obviously components are common throughout every UI framework at the moment, so, if you're not using React, you can translate the examples. All of the examples today will be React.  This is it a pretty simple component button. It's hiding there is a default type of submit. If you wanted to make that button more prominent, bigger or a different colour, then you might add a second class to it, a primary class. This is the BEM variation or modifier before that gets passed through it. It doesn't change anything else about the button. It adds another has. This is the work flow that a lot of us became quite comfortable with and doesn't scare us at all. If you look at another example where you have to change the type of the button and also have to attach a class name, you get the weird duplication where you've got, using two variables to say the same thing because potentially not all the disabled buttons are the same, and so button disabled has some specific CSS attached to it. Really, what you've got here is these three distinct at this point in time  tint states of the component yet there's information written there that isn't relevant to us as we are using these buttons. The class names in particular are implementation details. What is really important to us is that there are three types of buttons currently being used - the default, the primary, and the disabled.
This is our API contract between the user and the implementation details are all hidden. What is even better is that you can name the component and the properties whatever you want. You can build up a library of terms that makes sense to you as your team. I think this is even more - this is more semantic than working with HTML elements and class names because, for one, you reuse HTML elements to mean very different things, there is also only a limited set of valid HTML elements and, three, your class names have to be valid CSS things living in a global soup, a global name space.
The goal is to build up Lego bots like reusable pieces that encapsulate something. , behaviour, visual, typography information - something. Starting from this basic point, when you start thinking about how you would design a library for CSS and JavaScript, is how we created styles components.
As Mark has just said, why would you want to use JavaScript to pass your CSS to your components?  Why is it beneficial?  He talked about not automatically being able to make your class names not collide, maybe inline critical styles, optimisation, package managing - all of those things. For me, the one thing I wanted to emphasise is that JavaScript as a platform to be designing these things is actually a lot more powerful than anything we've been able to use before.  You don't have a pre-processor like Sass has totally incompatible to every other pre-processor. He don't have post-CSS transforms that have to be run in a certain order because assuming they all read in a file from disk, transform it and then export it. That fundamentally is not as powerful as an idea as code and data. Just ask anyone, or the last time you have had to go through your web pack configure to make sure they are load in the same way otherwise the application breaks. But this is where I got to last year. I was convinced by all of those arguments it was definitely going to be better to have authored your CSS in JavaScript. But I didn't think it was better to write your CSS in JavaScript. There was nothing that was as easy, as fluid, as powerful as the CSS that I had been using. So then, those benefits aren't worth it. Ivana talked this morning about the skill and the value of people who know CSS, and how that's often undervalued, and, in fact, if you design an API for those people that really limits them, and asks them to totally change how they work, then you're doing them a cities service. What I wanted to do was to design a library that opens up the power of the JavaScript platform, whilst still feeling like CSS. That's what style components aims to be.  This is where Max and I might differ about how we would pitch it, what we would talk about, how we would explain it, and what we are so enthusiastic about. I see CSS components and JavaScript as CSS for people. It is making a version of JavaScript as good as possible for those people. All the benefits of componentisation and the JavaScript ecosystem without losing that power, that familiarity and that expressiveness. Max on the other hand, he might take a different approach. He might think the real power behind style components is the way it lets you encapsulate and combine the building block components more easily than anything else. That's why I'm really glad to be working on this with him and the rest of the wider community that contributes to the project, because in he is Wednesday, the project is both - it is trying to do both. It is trying to be both the best thing for CSS people and the best thing for component-minded people.  And it does that by encapsulating the relationship between a style and its component in something called a style component, right, hence the name. And expressing your design intent in a way that leads you down a heavily component-descriptive path.  So see how it works. Now the first thing to notice is that it's a normal JavaScript library at present it doesn't require a webpack configure, doesn't - config, there are at least two that will optimise it and do other things that you can look into, but it is just a JavaScript project.  The first thing you do is you define a style component subtitle as a styled H1 and that can be a style div, image, anything. It can be a styled abstract component, link, anything. But that is your kind of syntax. Beneath that, you just write CSS. You write a little block of CSS and it should feel as close to writing a CSS file as possible. If you're writing this in CSS would be .title instead of const.title. Other than this, this is a string. You may not recognise the syntax here, this is a feature called a template literal which is the back tick there, means you can do a multiline string that gets passed around as code. This hasn't been pre-compiled by Babel or anything.  For a second component on the page, you have the same thing:  a rapid component, and that should feel as close as possible to writing CSS, quickly, the same thing - a name and some rules. So, when you come to use the component, what you've done is you've completely hidden that information. In this render method, in this component definite in addition, the only thing that is there are the names of the components being used, the relationship to each other, the fact that the title is inside the wrapper, and the content, right?  To me this is the separation concerns I've been looking for. If I want to change the wrapper to be a section tag instead of a div or a main tag, change the title to H2 or H3, for any other reason I don't actually have to change it here, that's all the implementation detail of the style component.
The component now simply assembles these building blocks. But, importantly, and as Mark touched on, when it renders, it's just HTML and CSS. It's nothing different. It is not trying to reimplement the web platform or presuppose anything it's running on. It generating H1s and classes. That ability to write actual CSS I think is a really big benefit, but we go a little bit further, because most of us who have worked with CSS for a long time don't just write CSS, we write something like Sass. So if you look at a more complex component, you can see what I mean. If we have a colour changer, which in this case is a styled section, we can use a direct selector by nesting, and this is basically because I like this from Sass a lot, and so I brought it across. Now, nesting is the sort of thing in Sass that sometimes bites you a little bit and you can overuse it definitely. Here, if that H2 is complex, it would be easy to break it out into another component. It doesn't have the same failure case, doesn't go as bad.
What is also really good is that media queries, that sort of thing, like again in Sass, you just put them inside a component declaration when it compiles, they get inverted and the media query is valid. It means that you can work with these things as quickly and as easily as you work with a SASS file. So that kind of the CSS half of the library which is trying to be as familiar as possible, and, in fact, like familiarity I think is a huge design constraint, and it's something that really is difficult to do, like the implementation of style components is massively complicated by the fact that it does nesting, but for me, it is really worth it, because it makes it easier to bring the same knowledge and skills across into this new place. So the other half of style components is the fact this this is JavaScript. These are components. These do work like React components. And so we have different ways of solving the same challenges that every UI system has,  for style components, it is using props. Button example, if you're not familiar with React, then button is the component and primary is a prop - in this case, it's just a Boolean attribute. We can use it by defining our button, be a style button be and by using some magic in here. We have this interpolation inside the template string which is the dollar and squiggly bracket. The syntax my look familiar but it's totally standard JavaScript, it is just new, not commonly used. We've inserted these two functions to say that depending on the primary prop, either have it white on pale violet red or pale violet red on white. Functions will get run on every new component, but if you want to just use variables, this is the same way that you do. It is very simple. Mixins, media queries, you can extract them all, and, in fact, Polished came out of the desire to get a standard library for CSS basically that worked in this sort of way.
So that when you call this, what you've learned is one button without a primary prop, one with one. They generate different CSS and they get different class names attached and then they appear differently.  So the next more advanced kind of feature is the idea of theming. Instead of having to only change the display of something by talking to it directly, we can set up an environment and build these components that respond to it.
We can customise components of distance. And there is some code to do that. We have this component called a theme-provider and you set up a theme as an object which can be anything. It will get passed down, but basically in this case, we set up a key value primary and pale violet red. I'm more of a papaya-width kind of guy!  When you render it, if you wrap it in the theme data, that data is available to all of your style components and that can really change what you think a component is responsible for.
When you go to use it, again you use a function interpolation but this time you read the primary value off the theme of the props. Then, when that button renders, it will come out pale violet red. If you want to change that button in two different places, you have another option rather than making a variant of that but not, you can simply wrap it in a new theme. Here we have two themes, one with pale violet red, and then, when you wrap it in those two themes, they render differently. You can do this stuff really, really well with CSS variables as well, but the theming works through React - the theming reacts through mechanism, basically anything React supports. The key here is that these variables pass down through the whole tree. They don't have to be directly beneath them which means you can have components to their relationship between the theme and the component without having directly to make them talk to each other. They can be different files, different parts of the tree. The final finally that I want to talk about, style components, is about React native. Mark touched on this is the ability or new ability, a nascent ability for us web developers to target platforms that aren't the web. Something like React native is designed to offer the same mental model as React for the web, but it even re-implements things like the Flexbox spec, in order to make it as familiar as possible, but open up these new environments to you. So, with style components, we support that by we wrote a different back-end. We wrote a back-end that targets React native, instead of injecting CSS in the head, it passes the styled objects to the React native components means you can keep things as familiar as possible. You still name things in the same way, you still use the same syntax for CSS, although React native doesn't support all of CSS so there are sometimes when it's a little bit different. But the mental model is the same. When you come to render it, you're rendering components. In fact, this component here has nothing React native-specific about it at all, so potentially, you can share some components that do something, but between web and native, they pick a different wrapper and a different title because the wrapper in React native is it a view and the wrapper on the web is a div, say. Again, when it runs it is the same as any React native code. There's nothing different about using styled components once it's running.
So I would love if you would go and give this a try. Then hit me or Max or any of the contributors up on GitHub or Twitter and let us know what you think. There's a bunch of new stuff about to go into the library which is what I was supposed to be working on yesterday while Max was preparing his talk but it didn't quite work out like that. It's - this is pretty much all I have. So I just wanted to end by repeating this assertion:  I think this stuff is really ready. You may not be sold on style components, but there are so many other interesting approaches out there, so many different design ideas being Tested, because you have this more powerfully platform. And I wanted at least to give kind of a little bit more a wider view, which is the point of all of this work is to make things better for everybody, to try to make things faster or more reliable, and more maintainable for your team, and potentially to make it easier for the new people to join the industry. Every time we can make things a little bit better, it helps everybody. So, I'm going to steal Mark's phrase for the end, because I really liked this. This was one of the core reasons that I felt compelled actually to work on this stuff. Ivana in the first talk talked about the historical separation between CSS work and real development, and it made me think that I realised the only way to understand all of the CSS and JS work is to realise there was never actually any of that difference. CSS and JS pre-so he was that CSS was an engineering task all along and it is just trying to bring the most powerfully tool to bear. CSS and JS isn't an opposition to CSS knowledge, it is about allowing you to design systems to enforce the kind of practices that you think are important. These are the ones that I think are important. In conclusion, JavaScript is really powerful and it makes working with CSS better. Thank you so much for listening to me talk, having me talk. It is a tremendous privilege to be up here speaking to you, even if it's under unfortunate circumstances. So, I wanted to wish Max all the best. I'm sure he will be here next year. If you've got any questions about style components, talk to me. I might have a lie-down now. I will be around at the party afterwards. Thanks very much. [Applause].
TIM:  Bring it in!  [Laughter]. All right. Thank you so much. So, we have another break. Look at that!  We have another break. Again, you should definitely check out the community area. There are a couple of little talks going on, living style guides, if that is something that interests you. You should go there. The screen-printing, and the photobooth that takes really good photos.
JESSICA:  I have a fun fact about fire safety:  so, everyone on the bean-bags, we have to keep a two-metre space between the bean-bags and the sound booth so that there is a way to escape in case of an emergency only which is unlikely. In the case of unlikely emergency, we need to go between the bean-bags.
TIM:  There's more food out there. I had a banana. There's one lesbian Nana.
JESSICA:  We will see you back here for the final set of talks.
[Break].
