---
talk_id: lets-build-a-css-game
---

TIM:  I love Treehouse!  It is hug o'clock. We have our last speaker coming up soon. Afterwards, we will give everybody a little bit of an update what we are going to do for the parties and everything like that. Some information that I do have that I will give you now prior to the end is that the clothes where your clothes are will be open until nine and then open on the hour every hour after that because we are going to be going to a party that's a little bit adjacent to this. Otherwise, our last speaker here, Una be, is the kind of person who has a wide variety of talks. I've seen her talk three or four times and every single time has been something completely different been you a always, always very, very fun and he's educational, and, today, I think we're going to get some live coding which is, I don't know, traditionally pretty difficult!  But I think she's going to do a really, really good job.
UNA:  System preferences.
TIM:  Get ready for that, and games which ties into what has been a really, really good schedule all round. I was told the party information I was told, you're going to be told how and when to party. So, I'm looking forward to that ultimately. Yes. It's going to be a good one. It looks threatening. I'm scared. Yes. I don't know what else really to deliver. After this, we're going to get a big family photo together, announcements from all the people that put this together and everything like that, so stick around for a little bit and then I don't know, beer and wine, no hard liquor with, it says, but this can be really fun. I get like a sneak peek. Otherwise, I hand it over. Una, everybody. [Applause].
UNA:  Hello! Thank you so much for having me. I'm super, super excited to be here. This is one of my absolute favourite conferences and this is such a massive and awesome audience. Give yourselves a round of applause. [Applause].  I love CSSConf because it honestly feels like this giant family. We are all into these really nerdy things, all into them together. And it really just feels like this big family, so I wanted to announce something that I've been working on for the past couple of months, almost a year, that kind of feels like my baby and this is the only appropriate place to announce it. I'm writing a book called the Front-end Developers' Guide Book.  I had to announce that here because I love all of you!  This is about front-end development, everything from soft skills about how to learn about side projects, how to make time to do technical skills, also foundations, also SCO, accessibility, performance - all those things. Been doing that for a while, working with the publisher Smashing and it will be out soon. There is a lot of practical stuff in this book. In this talk, we will flip that over and end the conference with more of a party mode. We are going to write a CSS game, but we will go over some things for you to learn. We will talk about Sass. There's going to be a lot of Sass involved in this. We heard some talks about CSS and JavaScript. This is going to be writing functional programs inside of Sass itself, so we are going to flip that script a bit. We are going to do some pixel art. We are going to create some generative pixel art based on things that we are writing individually inside of Sass. That will be some fun. We will do some functions and loops, we will talk about grid briefly, talk about pointer events, CSS animation and how to crash your web browser because none of these things are great for production but great for having fun, for experimenting with CSS. So, let's meet our cast:  have you seen these people around?  These are our lovely organisers and MCs here today, and I wanted to kind of bring them in the game.  I wanted to give them high-fives for the awesome job they did putting this together. I was inspired by Mario, so I thought maybe I could get the cast of a game, put them into Mario and make some magic happen. So we are go to do than. I brought them into illustrator first, and I mapped out pixel by pixel exactly what I wanted them to look like and I translated them into maps. Here we have Polly, Kevin, Tim, Kristina, Jessica, and once this is all said and done, if all works out well, we will have created this CSSConf high fives game. This is going a little crazy!  This it lasts for eight seconds, it counts up our points. All this is done in just CSS. I'm going to use gulp essentially to run browser sink so you're not waiting for me to do this and also run Sass. This boils down to CSS and helicopter. We want to build those characters first. It's going to take a while doing it pixel by pixel. I will do a simplified demo with a heart. We want to hook this into the HTML with a class. We will call it pixelised heart. I hit tab, and it creates that for me. I want to open my heart CSS and get started. Let's have a map of colours, red and transparent so map it to 0 for transparent and R for red. Cool. So now we know what colours we are going to correlate our pixels to. The second thing we can do is determine the size of the pixels. Let's make this 20s, a little bit easier for you to see out there. Now what we can do is start creating this pixel art. I have a map called pixel art, a variable - I'm going to call this map "hearts" and that's going to be map itself and we will create this by adding multiple lines included in parentheses to determine the number of rows we have. It is six rows, looking something like this and fill those expecting the pixels we have. Trust me, there's a method to my madness. You can then go through and draw out all these pixels individual ly libelling you would see in a heart and I know you can't see it yet. I can highlight all these reds and show you what it's going to look like in a moment. Here I'm just drawing it out. You can see that I have erred here, so aim going to fix that. Really, you can set these colours, apply multiple colours, create stripes if I want to to add more colours to the list. When I highlight the reds, you can see that I have created a heart out of Os and Rs to create this pitch he will map. We have the heart pitch he will map. Now we need to read through the entire map to pull out those pixels. We will be using here Boxshadow because it allows us to give us an unlimited number of arguments in the property list itself, so we will have an unlimited number of arguments based on the x and y co-ordinates from the top left as pixel values. Let's just make this. Let's write that function, because we can write functions in Sass. I'm going to say we're first going to generate the shadow list so create an empty string to begin with and fill that as we go. Then we are going to need to get the rows. As I mentioned earlier, the rows will be the length of the matrix, since we have six of these, one, two, three, four, five, six going down, that's going then to denote the rows for our entire matrix. We can its trait through those rows to get the actual row number, so in Sass we can use a fore loop, at four row from one through the number of rows here, so here I'm going to use rows variable that we just set. I'm going to set that row number so it's going to be row num and the nth value to pull that in. We know the row number we've landed on. Now we can go that again and get the column number. That's going to be for col from one through the length of the row number, because that means that that we are going to go through all nine values that are in that row, and get the column value and finally we can see where the dot is, where it is the nth value and the video value featherweight and the column. Now we know whether we are an R or O value. We can now start building the shadow list we have. This is how you append in Sass plus the values pulling from here, so get the exposition using size, the pixel value we set as 20 pixels, times the column, plus we need to have a space here for the syntax of drop shadow, plus the size times the row. And from here, we can get the colour. So we also add another space, we want then to map get, which is how we access items inside of the map itself. We're going to access from the colours' map and then use the dot value to pull in either transparent or red, converting that from an O or an R to transparent or red. We're almost done with the shadow list but then we have to add a comma, a comma between every single item in this list except for the last item. So we have to do a negated if statement. Let's say @if not - the length of row num, at the very last, number nine, and with the very last row, so we can say row is equal to rows. Then we want to add a comma. Then the shadow list becomes the shadow list plus a comma. Cool. So the last thing I want to do is return a value, use at return, unquote, because currently it is still a string that we have. Unquote the shadow list and we can finally return a value. Nothing is going to come up here until we find the div we created in the page. Let's make this a pseudo element - the height and width first, so the height can be the size and the width can be the side. We want to give it content. This is going to be fast CSS so I apologise about all of the improper placement of all these things if you always make sure they are nice and neat and orderly. Inside the box shadow, we can use the function on the right-hand side of the property, so here these are functions we call pixelise and need to map-get because the heart map is inside another map. We will map-get pixel art. Yes. Pixel art is our sort of map of our maps. We are going to send the advise value again which is default and it is set globally here. Once I save in, our heart will appear on the screen. I somehow didn't mess up. That's great!  [Applause].  The next thing I'm going to do is inset this and I'm going to use in ampersand which acts as an anchor in Sass, so I can edit pixelised heart after set up in there. I'm going to give this an outline so I can debug this. You can see that this element is not taking up any space on the page because we haven't given it a width or a height. That isn't great if we want to use it within the game itself, it has to take up some space. I want to give this position relative - oh, and I then want to give it width and height and I will be using that based on the size we've dynamically created in the matrix. I can give it a height. The height is the length of the matrix times the size, so get the pixel size and multiply it by the length of that matrix and this is map get pixel heart. Copy that. Paste it in there. The height, the width is going to be the length of one of those columns, so since we are not inside that loop again, we can get the size and the length of just one of those columns, so we are going to have to map get one of them and use the nth value again to say the Nth of that matrix and the first column and say why not. That is now properly placed, but you can see that it has shifted over. The reason why is that box shadow starts at the bottom-right corner of the div, starts at the end of it, we can shift it up so it says top of negative side, maybe left of negative side, and our heart is placed outside the div as we expected based on the heart that we created out of the literally letters on the screen together here.  So, we can then take this idea and open something like I have a character at CSS. I  already did this and I am going to just uncomment and zoom out of here so you can see what the characters actually look like. My vision is forever ruined, but it is fine. So, if I save this and then I open, I have a character style, you can see all the characters that have appeared out of this generated map, and you can dynamically change the colours, so like if I wanted to go into here and I wanted to change all of the black to like a red, because why not, once I save this instantly, it will all change, so you can create this art dynamically in your browser and it is really fun to play with. You can also animate this if you're a masochist and want to make your browser run really slowly. I wouldn't recommend animating box shadow but it is an option. So the next thing that we want to do is keep some score. We had our characters but don't have our game set. We have to create our entire game area. In here, we are going to use emit to make this click for ourselves. I will have a list and that will have a class of game area, then within that, I want to have a couple of list items. So I can say that I want to have a list item next to that, an input. It's going to be a check-box, so type equals check-box. This will be our click area to make sure we have counted up these points. Once we click, we count up the points. Next to that we have a div which is going to be a character. You can do times three, hit tab, and now I have this list and in it three list tights. I have the input and I have our character. Nothing will show up until I go through and make sure that I add a little character, so here I can say pixelise, maybe a Kevin in there - we could have three Kevins - or mix it up and add like Polly here, let's add Kristina on our screen. Now all of our characters have appeared and ready for high-fives. With the box shadows you can make them bigger or smaller, but it allows for a variety of options that you can play around with.  So we also want to add a place for our score to show up here, so we can have an H2 with a score and inside of that let's get a span with a class of score that will access later to show our points.  Because the amount there, they're little, yes, going to split this screen here. The next thing we want to do is then open a new CSS file. Keep this organised. We are going to open our game-play CSS. We need to sign this click area so it's not just the small check-botch over there, so we can quickly edit this, give it a position of absolute so that it shows within its parent there, we can give it a display block. Then we can do some things like give it an outline so we can debug this. Outline doesn't take any space on the page, whereas border does. I have that outlined, maybe I want to give it a width of 40 pixels and a height of 40 pixels so you can see it. It is currently behind the characters, I believe, so we need to give it a Z index of three which could work. I want to create a Z index now and use that to adjust accordingly so everything is order ly, but like I said we - I can do the appearance none to get rid of the check-box. It works well in webkit and Chrome but not Firefox. You will have to create a span around the check-box, scan it and have a display of none in order to make this work in Firefox. Everything else will be identical except for this little click area. I want to give the top negative ten pixels and left negative five so that it positions nicely, maybe you want to give it a tab much ten. You can't tell that I've clicked on it, so we need to make sure there is a feedback mechanism. I don't know if I can hover over it. Because it's like a little hand, it's like a little hand hovering here like a hand for the high five, so that was good. We now know we were hovering. Maybe we want to add a property if it is checked, give it like a background of green or something, so we knee we've clicked on it. Cool. We know now what's been checked and what has not. We did deal with that later, get rid of this outline. Let's count up some points. Here we currently have a score with a span next to it and a class of score with nothing in it because we haven't provided a value. We can use counter increments. In CSS that was intended for outlines when you have an unlimited amount of data that you're counting up and you want to be able to increment it up. We can use counter increment in our game to check where we have our check boxes, and apply the value, put it out on the game. So, inside of score, we can give it an element with content, and the content that we are sending over that we are pulling from DOM and sending over, the counter of a game. So once I save this, a zero will appear because we don't have any points yet on the game. We can mitigate that by adding the rest of the things that matter. So the game area needs a counter re is the -- reset of game we're we're naming it here. After that, we want to give the click area when it is checked a counter increment of game.  Now, once I've clicked on these, you will see that it is starting to count up our score.  So counter increment can be used for that. If you want to make this game even challenging, we can use a decrement. Counter increment is one but you can customise it to add multiple pointing with negative points and play it up if you want to make it challenging. We do want to make it more challenging, not in that way, but we want to add a shield, and I can click on all of these, count up, and I win. Let's go back to our index. Let's get rid of some of this stuff, save that to my clipboard, because we want to add a shield inside of our list. We have the unordered list with the class of game area. Inside of that, we have our list item but instead of having it directly to the input and click area of the character, we want to wrap that inside a character wrapper, so day .character wrapper MP maybe we want to have sunshine of those. Now I have my list item with a shield, a character wrapper, and we have our check-box, aka our click area, our characters, and we are ready to go and make the game what it is. We have nine of them, so I can make a three by three grid. I can add pixelised characters. Let's have all the Tims lined right up. Let's add a Jessica.  Let's add a Kristina, let's add a Kevin. Polly. They're all here. Four times in a row. He likes to give high-fives!  They're on top of each other. I'm going to change one it looks a little crowded. They're on top of each other. We want to arrange them on the screen here, so we are going to use some CSS grid fun. Have you all used - how many of you have used it?  I'm seeing like a quarter of you. It is really amazing. Like it gives me the shivers, I love CSS Grid. We have our click area, right?  And the first thing we want to do is give it a display of grid. First I'm going to style the list item as on  so that you can see it and see what is happening here. I'm going to give it a background of dodger blue. Like the papaya whip that Glen likes. I'm a dodger blue kind of girl. I'm going to go to the grid and apply some magic. When I give it a grid template, it will automatically fall into place. I want the three by three grid so I want the fractional unit which says take up as much of the remaining space as possible within this fractional unit, so, if I use one, it is going to be even to each other, and then I can say I want one, two, three rows and then I want one, two, three columns. You can also use a repeat property inside of grid to do this but it is clear right now if I want to do 1FR, 1FR. This isn't moving. But I'm wondering what I wrote wrong. Let's find out. If I save this out, the board isn't given background, either. Let's see if - I spelt something wrong. What is it?  Click area. You're right. It is game area. This is why I love you all. You're sitting in front of me. Awesome!  Live coding, who thought something could do wrong. It appears as I expected, and here I can give it a grid gap of, say, like 20 pixels, and only the space between the pixels moves. It's like magic. Nothing on the outside, you don't have to work with these weird n values or last child hacks, it just works the way you expected it to. Now we are going to do that mysterious second thing of computer signs and centre things. So we're going to vertically align this with display flex. We're going to do align items, centre. And we are going to do justify content, centre here.  So once I save that, all these elements will be kind of aligned within this space, we are going then to use some margins here to centre this area. We're going to give it a width of like 80vw and then we want to do a margin, so centred on our screen and looks centred here. Now we have this shield, so I just pre-wrote it because it is placement background with height, absolute positioning, but we have it in front of our character. When you click, you can't access the hand unless you go a little higher to get that score value up. You want to bring the score back into here. When I click up, you will see that I can reach the hand here but not here. We need to go back into our board or our game-play file to make this even harder because we can still tally up these points. It is still not something that's challenging until we make it challenging. We can do that by using some animations. Let's go back into this file and add some CSS animations. We can use key frames to do. We're going to say key frames of move because we don't have to be creative. We can really quickly come up with the name. I will have to go from zero per cent to 50 per cent. I will have it alternate and it's going to go a little bounce, so from zero to 100. I'm going to use the transform property to use this in a way that's going to translate y to move up and down. I'm going to say transform, translate y and it is going to go from negative 25 pixels to 25 pixels. I'm going to apply this both to the character and the click area, this animation, which is move. I'm going to say 0.5 seconds. It's going to be forever. They're going to be jumping up at us - infinite, and it's going to be alternating for that bounce, and it's going to be moving forwards because we want the paint to move forwards. I'm going to save that. Now our characters are jumping up at the same rate ready to give us high fives. It is harder to click and grab them when they are up here. It is weird that the characters are moving at the same rate here on the screen, so we can use another foreloop in Sass but instead efficient doing it inside our class, we will generate our classes within the foreloop. At four would be we use I from one through nine which is one of the characters you have, you can use a variable for this. We can use the Sass random function to create different animation durations, different speeds for our characters. Let's use random, and we will do random times like 1.5 and then we have to add the second so it knows what we are using here for the duration. Now we can say we want our list items and we can use the child selector. We're going to interplate that I variable to use it in the class locker we are creating here and we want to give it the speed. We want to say for all of the characters and all of the click areas, within this list item, with an nth child of one through nine, we are going to change up the animation duration and overwrite it to be begin interpolating that speed variable, hit save, and they will be moving at different rates. We've got an excited Tim and Kevin here. That is a little bit better. Tim is still very excited to be playing this game!  This is starting to look more like what we are expecting, but we are still going ultimately be winning because we don't have a time limit yet. Let's add a time limit. If we go back into our index, we can create a class, like a stopper class. By this, we will have an H3 that says game over, sorry. And we will save that, and we can go into our board. I have it here again so I can uncomment that. It's currently on our page. This is styling it so that is being an override in the page. It is taking the full width and height.  I'm increasing the font size a little bit for styling purposes but now we want to move this off the page. We want to do a transform trans late y of negative 100bh so that is moves off the page.  We want it eventually to appear in. When we want things to move in CSS, we have to add an animation. Let's do that and name is animation stopper. We will do a from at a two here. We can use this value, this transform, so we want this to move from negative 100vh to 0vh so it goes back to the original location on the page. It's like that reverse animation we heard about before with this awesome data visualisations. Woo are going to apply this to our stopper. We want to make at that 0.5 seconds. This could be a variable. Great when you're creating style systems. They have the same look and feel to them. With your Bézier curves. I'm using linear, using it as default. So I have this animation and I want the paint to go forward so it ends as it goes. When I save this, it pops in. That's a very short game at present it is less than half a second long. We can use the animation property to make the game eight seconds longer. Once I refresh this page, it's going to take eight seconds until the animation stops working. I want to pull this out into a game-length variable so we have that game length be eight seconds and I can use that, and use that and propagate it through the rest. If you have noticed we've lost our score. It's behind our stopper because we haven't styled it yet. The entire score is on H2, yes, you should namespace all of these things but you should style that H2 so it appears above. We are going to do the Z index here of ten. We are going to give it a position relative and then give this an animation. We want this to appear, but not from negative 100 to zero, we want it to appear from negative 50vh because that way it can pop in and go in with this game over. I haven't applied this yet. This is at the top of the page. It has to be positioned - oh, that's why. This needs to be score. We haven't applied this yet. We're going to apply it here when you apply the animation. You're my favourite person in here right now, thank you!  Here we go. We're going to apply the stopper. We will have the same animation delay but maybe want to add 0.25 seconds so is occurs later than the last one. Once we play this, refresh after eight seconds, the person will appear after 8.25 seconds, the second one will appear and have a nice pop-in effect for this game. So, that appears that way, I want this to continue look a little nicer, so we can do some more things here about applying some -- by applying some notifications that you've clicked on the characters. Like right now, if I'm playing the game, clicking on the characters, they're still moving around, you don't really get any feedback. The UI of this isn't that great because I don't know that I've really gotten the score until I look down, so we can then go into our click area and say if the click area is checked, we want to stop the animation, and this is why before when when I was applying the animations we applied it to the click area - its sibling, the div right next to it, to apply the stopping. With this checked, we want to say animation none. We also want to say pointer events none because that means that it is no longer going to be able to be clicked on. You can't unclick. You can't remove your score. We also want to say any character next to this is going to get an animation, none. And, we want to maybe add a filter, so here we can apply a grey-scale filter to it. As we play, we can refresh. Once I have clicked on this eager little person, they're hard to click sometimes, they should be stopping. So let's debug. Click area, checked, animation none, pointer events, none. Let's see. Theoretically should be stopping, but I'm wondering why it's not. Maybe I'm not clicking on them. Maybe I am. When this happens, you have all these things saved, so believe me, this usually works. I'm going to go to another branch I have which is called step 12. And then I'm going to hit - I will click that. So, it looks like the code is the same. I may have done some kind of strange thing, I'm going to refresh that, I'm going to close out of it and open port SCSS. As in clicking this, it is stopping the propagation of the event, the character stops moving.  We now we've clicked them as they stopped moving. That was hard to click. We have our score and our game. Let's add that heart back. That is an after-suitor element, we can extend the class we've created so say at extend dot pixelised heart, and, when we replay the game, a little heart animation will appear once I've clicked it. I've clicked it, the heart is there. We can even give this a margin top of negative 25 pixels so it appears just on top of that character, and we have created here in like 35 minutes a CSS game live on stage with all of your help. So, thank you. [Applause].  It's a difficult game. [Applause].  So what I really wanted to get from the top is while you do these things, there are so many CSS properties that you might not use for everything, but there are so many uses of them that are creative uses. If you go on to CodePen you can find awesome examples of CSS games. You can play this game if you go to this site. Post your high score. Let's see how you do. You can fork this from CodePen and make your own game. You can improve it, build upon it, you can play it, and you can make it even better with some of those awesome things we've learned today. Thank you very much for having me, and thanks for making the web fun and beautiful. [Applause].  Enjoy.
TIM:  Okay. Fantastic. There we go. That was the last talk of the day. We have a bunch of things to tell you.
JESSICA:  Take notes!
TIM:  Okay. So dinner's going to be after this, it will be in the same same areas. We have the social things going on in the back. There are a few more people speaking. I know the { live : JS } they're going to turn the lights down there. If you haven't seen that, you should, because they're incredible. What else do we have?
JESSICA:  After food and lightning talks there, there will be a party and it's immediately adjacent to this building. The way you can get there is by going around the back side of the screens.
TIM:  The place is behind us. It is called Glasshouse. After nine o'clock, then they are only opening the door once every hour. You will need your badge to get back in if you come in prior to then as well. Yes, so, with that said, we want to thank of course our fantastic organisers. Let's get them up here!  Wooh!  [Applause].  The Kevin Mario was my favourite. Just look into those eyes!  Thank you. -- Mario.
>> Did you have a nice day?  [Cheering]. Are you ready to party?  Later?  Yes?
>> Yes!  All right, before we can do this, we want to thank a bunch of people, because without them, it wouldn't be possible for us to make that all happen. First of all, our two main sponsors, SinnerSchrader and eBay Tech as well as Mozilla, Google, Twilio and Cloudflare. Please give them a big round of applause. [Applause].
>> The scariest part of me for each conference is that I might forget one of the amazing volunteer people who dedicated their time here. I have a piece of paper and I hope I won't forget anyone because we're so grateful. First of all, you might have noticed our venue - I was blown away when I first saw this a few days ago. What did you think about this?  Did they do a good job here?  [Cheering]. [Applause].
I think so too, so our thanks go out to the team behind all the production that you see come to live today, to the people who put on the super tasty and 100 per cent cruelty-free catering today. Also - yes!  [Applause].  That's for you!
Also, if you turn around and you see the crew over there, they were in charge of beautiful lighting, cool 3D mapping effects around here, producing beautiful videos uploading right now so you can see them tonight, at least the first of them, the people who gave you great sound, video, tech support, all of this is possible thanks to you. You're wonderful. Thank you. [Applause].
You've heard a lot of various accents and different degrees of being nervous up here today. It is not always easy to understand every word. To make that easier for everyone, we have set up live captioning, which means invisible helpful people have been typing every single word all day, which is incredible. Hello to you. I'm sure you're hearing this right now. You're fantastic. We will have a transcription of every talk for everyone after the conference as well, and we're really happy to have that. So big applause. [Applause].
Also, for the memories, we will have beautiful photos and a great mood film. You saw the mood film of the past years at the very opening of this day, and you've seen busy photographers and videographers today. So give a hand today for our video and photo teams!  [Applause].
>> And, of course, we would like to thank the wonderful people that were on stage here today, our MCs. Please join us on stage. Tim and Jessica!  [Cheering]. Oh, thanks so much. Of course, our wonderful speakers that we hope you learned a lot from today. Please join us on stage as well. Everyone!  [Applause].
We of course would like to thank the people in the background that you didn't see so much. Our lovely team that really we could not have done it without and I would like to invite them all on stage, including JSConf who have been incredibly supportive in putting all this together. Come join us!  [Applause].
And, of course, we also have a few people from the Global CSSconf EU with us. Please come. They're from Australia, we have Budapest. [Applause].  And of course, last but not least, you, because you make it all worth doing, so thank you so much. Thank you for coming, thank you for supporting us, and it is actually time for our family photo, so we would ask you to come and join us as well!  [Applause].  One photo now with all of us. Woooh!
[Music].
>> All right, so,  ... .
[Music] .
>> Perfect. Thank you!  Okay, let's see. Closer. Closer!  You're doing great.
>> Notebooks for safety!
>> Everyone say claustrophobia! Don't dance on the stage!
>> It's getting warm up here!
>> Have we mentioned this is the biggest CSSConf yet?  Probably the biggest photo ever. Thanks, Michael.
>> Michael, you should be in the photo. Just keep telling jokes!  Woooh!  [Laughter].
>> Two, three, one ... CSS!    One, two, CSS!  [Laughter]. [Applause].
>> Thank you!  Well done. Music!
[Music].
