---
talk_id: getting-reactive-with-css
---

TIM:  All right. That was so good. So our next speaker, David, is one of my favourite speakers. I kind of really like it when people bring some of their passions and other talents and combine it with development, and bring that kind of attitude together. In Budapest, David's talk was about similarities between music - he plays piano - and animation on the web and how to tie everything together. Quite recently, David started a massive fight in the Twitter community. He claims that it wasn't his fault, but just before he got on the flight over here, he kind of Tweeted a benchmark that he had run between inline CSS and not inline CSS, and then got on the plane and logged off.  "What is going on?  I don't have any part of this." He arrived in Berlin and looked at his phone with jet lag and was like, "Oh, no, with , I'm in trouble now!  Back I think we've .
David's first Tweet was to somebody called, "Greg the musician" who was talking about travelling, and he was very into the travel, so his first Tweet I think in 2008 was "Let me know when you're travelling again. I'm going to go with you." That's David. Did you make it?
DAVID:  Yes.
TIM:  There you go. We've got closure, that's the main thing!  Keeps us going. I'm really looking forward to this. Again, if you look at any of David's work, you kind of get tonnes of really nice animations,. There's one thing that was particularly awesome was like this CSS husky. I don't know really now to explain it. It was like a full-on animated svg, lifelike moving around. Everything's great. Everybody, David. [Applause].
DAVID:  Hi, everyone. I prepared this because the Wi-Fi was screwing up on me, so actually, I wired in and now it works. So, ... . My name is David Khourshid and I'm excited to be here for two reasons:  number one, I fete to share the stage with so many amazing talent the women and men in the CSS community, so that's pretty awesome. And also because today we're going to be exploring some areas of CSS that we frankly never thought was possible before.
I work for Microsoft, so I'm obligated to tell you that Edge does not suck, okay!  If it does, I'm not on the Edge team, so it's not my fault!  A year and a half ago, I entered a hack-a-thon with my friends. It was an Angular 2 hack-a-thon and there were two main goals. Number one was learn the basics of Angular 2 which I think is now on version 5 or 13, and also something like a to did do list or weather app. So we built Tinder, not really available. -- viable. I was delegated as the CSS person for doing this project and everyone else did the angular which I was thankful for. They were thankful that I was doing the CSS because, as you know know, the maximum number of CSS developers that could work on a style sheet without messing it up is between zero and one. So I was that one!
I managed to make the interface look as close to the Tinder interface as possible with the exception one thing, and in a is the whole swiping thing. Now, I had only two hours to do this so I was trying to frantically figure out how do I do the whole swiping interaction?  So I was looking up tutorials and they said here's this jQuery, here's this Ionic thing but none of those were going to work in Angular 2 because Angular 2 was so new. This led to a lot of questions. First and foremost, how are goats going to use this app?  Secondly, how do you create interactive experiences in CSS and JavaScript?  For years, I challenged myself to create these complex interfaces and even animations like this box using only CSS, and by doing that, I got to see how much CSS could actually do.  Because one-year constraints to thinking inside the box instead of outside the box, you get to know the box really well. By doing this, I got to look at all the ins and outs of CSS and all the little tricks you could use in order to create complex things. Eventually, just working in CSS, you hit a wall, right?  You discover that CSS is not powerful at all. You need JavaScript to do complex interactions, but I also discovered that CSS not being powerful is a good thing, and there is a principle of least pour that the W3C says has to use the language with the Middle East power in order to express what you want to do, so CSS would be that language for styling.
Now, CSS HTML and JavaScript are pretty much the bread and butter of web apps which is completely different than android apps or iOS apps. We are in an age where progressive web apps are becoming more and more important, an alliance between web apps and native apps are being blurred -- lines. Because of this, interactions are crucial, not only because users come to expect it, because users want to be able to play with an interface and move it, pan it, and do do all sorts of stuff with it, but also because it reduces cognitive load. So what if web apps felt like native apps?  If we could think about that, how exactly can we get there?  Now, android and iOS have a slight advantage. You have core animations, layouts, property animations, and they handle native interactions like touch and voice, and all sorts of stuff, anyway tasteful within their APIs. The web is playing catch-up but it has a little while to go. Think about this:  what if interactive web user interfaces were easier to make, right?  What if they were easier to make with CSS?  So you all might know that CSS is awesome, but some people don't think so, some people are like, "No, CSS has its quirks," and there are tonnes of things that we struggle with. The thing is if you read the spec for once in your life, you could fix a lot of these problems, but that doesn't stop people from people thinking that CSS is just awful. Instead, today, what I want you to do at least for the next 24 minutes and 13 seconds is to think of CSS as fun, and we are going to make it fun by introducing functional and reactive programming, right?  The techniques I'm going to show you are going to be applied anywhere. So we are going to be talking about CSS variables and functional and reactive programming. What we're not going to be talking about is CSS and gist JavaScript - that comes later - and we are not going to be talking about framework like React Angular and Review that you might be using to build web apps, and the reason I'm going to show you is that the techniques I show you can be applied anywhere. On the subject of CSS and JS, there are only two hard things in computer signs:  the first one is naming things. CSS and JS aims to tackle this one. [Laughter]. Naming things. How many of you have actually used something like CSS modules or I don't know, any of the other million CSS and JS things?  How many of you have used it?  You might know how it works. You have a style sheet or you have something where you define styles and it takes whatever class name you give it and it turns it into complete gibberish, and this way it tackles the naming problem and it tackles the problem of global styles by isolating it by creating unintelligible names. Not farts!  Also there were some solutions that were proposed a long time ago. In internet Explorer 7 we had something called CSS Expressions with where we put JavaScript inside CSS. Over here is code to vertically centre this div in the body. This goes to show you how hard it is to vertically centre something in internet explorer. In Netscape, not wanting to be left out of the party, detail out with its own JavaScript-style sheets instead of using CSS, it just used plain JavaScript in order to style anything, and if you're wondering Netscape died, it is because of this. [Laughter]. But now, today, we have CSS variables, also known as CSS custom properties, but let's be honest:  no-one's ever going to call it that. And, thankfully, for all the browsers that we care about, it's supported, which is really, really awesome. Unfortunately, in Internet Explorer, if you have to spore Internet Explorer variables aren't supported been but that's okay because nothing else works. There's also Opera mini too. How many of you know what CSS variables are?  I would assume most of you because you're you're at a CSS conference, you want to be up to date on the latest and greatest. So here's a CSS variable, in case you don't know. It starts with two dashes. The reason it starts with two dashes is actually a really important reason. I don't know what that reason is, but it is I'm sure it is important!  Right now, this does nothing until you actually apply the variable inside of a statement like that, and so this 150 pixels is applied to the transform and so it moves 150 pixels to the right. But what if we do this:  what if we took the units out of the variable?  Right?  Now we have to use calc, and when you're uses CSS variables, the more you use it, you're going to discover that calc is going to be your best friend with CSS variables. Here's why we did this. It's because you could sets these variables using JavaScript. All you have to do is you take the elements, the node, you do the node.style.set property and I'm using a library called hammer.  Hammer handles touches, pans, text, any interaction with your fingers. So it emulates mobile experiences really well, and over here, I'm just setting it to recognise when I pan left and right. I take the delta x from that and I set it to that delta x variable, and so now I could use that variable inside of this transform. There's one problem here, though, and that's when I do pan end. I set it no zero because obviously we're not panning any more and it just jumps to the middle. This is where the magic of CSS comes in. We can set another variable called "panning" and do sort of like a Boolean CSS if we set it to one if we are panning and set it to zero if we're not panning. Down here, I don't know if you could see, but we set the transition duration to 600 milliseconds; if we're not panning and set to zero if we are panning because the movement is controlled with our fingers. And you might see this complex formula over here, and this reverses whatever I passed into panning, so if I am panning negative one plus 1.1 is zero, if I'm not panning, so I am panning. I like to call this Boolean styles - also called "BS" not to be confused with the other BS - bootstrap!  [Laughter]. I'm just kidding by the way!  Here's the real example over here. I'm using my mouse just to go back and forth, and you could see it works pretty well. [Applause].  If you're clapping at that, I'm really excited because there's more!
Why can I not just set it directly using JavaScript?  So there is a few reasons. If you've ever tried to use media queries in JavaScript, it is a complete pain, like especially trying to detect when the window resizes, listening for that, putting it in the request animation frame so it doesn't block your UI all the time, and there are also, like force first reduced motion which I don't even know how to do it?  JavaScript, but I'm sure there is a way, and so you could use media queries in order to control your CSS variables. This means whatever values you're sending through JavaScript, you're not married to those values. You're not committed to them. You could use them however you want in your CSS files. And what this also means is that you could use them in pseudo-elements. I know I said pseudo selectors over here, I was wrong. Don't attack me on Twitter or anything!  You could  you could use them before and after which makes things really easy. Of course, you could sort of he will late before and after elements in JavaScript, but don't do it, please!  There is also performance:  it's much, much, much faster to set a CSS variable on a container that is inherited by all of its child and descendent elements than having to go through each and every single one of those elements that has that style and set them one by one. So here is a benchmark where it shows it more than twice as fast as doing it with inline styles.
If you don't believe me, you could just click this link but don't Tweet it because I will get into trouble. There is also inspection too. You can open up your DevTools and immediately inspect the CSS variables applied through anywhere just so you could see that it doesn't matter where these values are coming from, right?  You could just modify them directly and be able to visually to see immediately what is happening when it changed those values. Which is much harder to do in JavaScript. So, what if instead you want to react to any event at any time that could come from any where in order to create rich interactive user interfaces in an expressive declarative way?  This is where functional reactive elements come in. I can tell you that you're excited - reactive animations. Here's what reactive animations are:  they are animations that involve discrete changes due to potentially continuous events. So, if you're a musician, one of the best ways of thinking about this is sheet music. Sound is conceptually continuous, right?  You play a note. It goes on, and it's basically an infinite series of sound waves. However, sheet music is like single dots on a page that represents what you play. Animations are sort of the same way. Animations are conceptually continuous, right?  But there are specific key frames where you define all of these animations, and so that is where the discrete changes are.
Now this idea is not new. It is actually really, really old coming from 1997, a year after CSS or the web was born - something like that. In this paper, which is very much an academic paper, there's one quote that says, "By allowing programmers to express the what of inter  animation, one can help -" I quoted this because it is the only paragraph I understood in the entire paper. Also, and this is the website by the way. This is what they did with reactive animations. We're not going to be doing this. It's weird. It's important to understand this because it blurs the lines between development and design, which is really good. So, in JavaScript, we have what is called a value which could be anything - it could be a number, Boolean value, it could an object. If we have a multiple collection of these values, we have an array. This is the spectrum of things that is that happen immediately. We get this value immediately. We get each of the values in the array immediately. Now, what things about things that happen over time?  A single value can be represented as a promise. You get a value but it doesn't come immediately, it comes eventually, maybe after three seconds. We're going to be talking about today - what we are going to be talking about today are observables which are multiple values like an array that all occur over time.
So, we are going to be implementing observables with RxJS and this is a library that follows the observable stack, so this is something that could very well be a native part of the web, but this is essentially a polyfill with a whole bunch of goodies built into if. We could represent mouse moves, for example, on the box which grabbing the client x and the client y and being able to observe each one of those positions. We can use the observer from an event pattern from doing the same thing, and this is for things that are not natively done elements. If I'm using hammer.js, then I could grab the delta x and delta y values by passing in a callback into this from a Venn pattern, and here is why this is so powerful. It is because we could operate and compose these observable values, so, if you think of this as an array of values that happen over time, and we get all of these events represented as balls, we could map each of these balls - that's one of the operators - and transform it into something else, such as a square. But because we are working over tile, we could also delay or do other time-like transformations, such as debouncing, throttling and buffering, things that you can't do with an array because an array exists at only a single point in time and not over time. There is also filtering, of course, just like an array, and there is an important operator called "scan". What scan does is takes the previous value and combines it with the current value. I'm adding one plus one is two, and so on. And this is an operator that I use a lot when I use RxJS.
So these are called "marble diagrams" and they're fun to play with because you could visually see how observables work together with different operators. I personally like to call them observe-a-balls. Describing two observables is where the magic happen. If you hit .subscribe, you get each value as it comes in except it is a callback. By doing this, you could isolate your side effects and changes into one.subscribe, and the observable, the other good thing about is that you define it but it doesn't do anything unless it has to, so it's lazy, it's sort of like me.
All right, so here's an example of using observables to get something else, get a change value from this this right-wing  range over here. The reason I'm doing this is because I got a comment on this pen that says this dog is a little hyperactive but it's cool. So I added a ring slider in order to slow the animation down, and you could see where I'm doing that over here. I'm grabbing this value, and I'm using it to define each of the durations. I didn't realise I also made it so that it goes super fast too!  [Laughter].. yes. Now, we could also add physics. All I'm doing is adding a dynamic .just library to make a physics observable every time I stop panning. So, when I do that, instead of going smoothly back to the animation, it bounces right back. This has been controlled entirely with CSS variables. The only thing that JavaScript is doing is sending over the values, so now we have complete control of styling and we could use those values however we want.
Here is another example where I'm actually using request animation frame in an observable in order to tilt this clock in a smooth way. And so you could sigh that over here, smooth - you can see that over here, smooth house. If I changed this and just used mouse, you're going to see that it's very, very rigid. This is one of the beats of beeping able to compose observables and control them declaratively just like you do with CSS. Here is another example that I did recently where I'm using linear interpolation to smoothly go from one place to another.
And this has also been controlled with CSS variables as well. So, I have a bunch of things that I'm listening to, right - touches, touch ends, numbers, which is whenever the number change in the range, and I'm making it smooth by using - by the if you don't know what LERP is, it is if you're going from one place to another, instead of jumping from one place to another, you go part of the way there and a little closer and a little closer, so you get this really smooth effect going on here. This app which uses a lot of observables, and a lot of CSS variables too; and this is one of the reasons that I'm using CSS variables is because, for example, that delta x value for going left and right, that's the only value that I need to send in JavaScript in order to control so many things. For example, I'm controlling the gradient in the background; I'm controlling the content inside; and I'm also controlling the text inside here. So, there's a lot of things and a lot of moving parts that are happening with just that single value, that single CSS variable.
Now, there's a really good reason why we want to move to CSS - not CSS variables with you observables and be able to expressively and declaratively define these animations and interactions.
This is a chart by the Material Motion Team at Google, and it shows the typical process for what happens when we create a motion design, designers prototype it, they get feedback, they use that feedback to continue the prototyping and eventually they hand off that motion design to a developer or a team of developers and from there that's when the engineering starts. Instead, we could narrow that cycle and have the prototype be an actual working prototype using real code that both engineers and designers can work on in tandem, and by doing this, and by allowing the feedback cycle to be part of the development, instead of just part of the prototyping, you ship faster, and that's one of the main goals, right?  Because right now, the way we are sorting doing things in JavaScript for dynamic styling is we apply the styles directly in JavaScript, but if we move styling over to CSS, and use JavaScript only for sending over values, then we could potentially replace JavaScript and CSS with any source and any medium, which means that these important values can come from anywhere and they could be applied to anything, so instead of CSS, think of it as canvassing with or think of it as WebGL, or think of it as platforms such as and destroyed or iOS - android or iOS. One team is doing this right now which is Material Motion. This is very much in progress. They're makes an animation library using observables - just like we talked about - and they are targeting iOS with swift, Android, and the web. It is still a few months out, but they have a lot of documentation on it and really cool examples where, so I definitely invite you to check that out.
When doing this, I also think of the future of what could be done with prototyping. If any of you have used Facebook or Origami Studio, this might look familiar to you, where you we define these little fragments that you could connect to other fragments, and what these are like, sort of a function where you connect one function to another and then you could control exactly what happens dynamically when creating your motion design for apps. The beauty of this, though, is that it could be translated directly to code. And so that way, we blur the lines between design and development. So, what will you make with CSS variables?  This is an example of something someone made with CSS variables and observables where, when I move my house, it is actually changing the HSL values, and it is sending the delta x position of the mouse over the CSS, and so the JavaScript is not controlling, all JavaScript is doing is sending over the values, and, yes, there is a whole election of CSS variables that I collected over codepen because codepen is sort of my addiction. I really invite you to play around with CSS variables, see what you could make, and see how using observables can really help your interactive user interfaces in both design and development. So thank you. [Applause].
TIM:  Okay, we're going to have a break for lunch. We have a little bit over an hour. I think we have like all the kind of dietary areas covered, so if you have any specific questions -
JESSICA:  This just in. Live cooking is going on!  This means if you have special allergy requests, please to the kitchen staff and let them know, and let them know so they can accommodate it. Also a note about the Wi-Fi.
TIM:  The Wi-Fi, we are trying to get it as slow as possible. If you turn on your Netflix and Dropbox, that would be really helpful!  Actually, turn them off, please. Thank you.
JESSICA:  Let us know how the temperature is. We've made it a little bit warmer. Hopefully, that's nicer for people, but let us know if you still need changes.
TIM:  Get some food. And get that yoghurt too. It is awesome. [Applause].
[Lunch break]
