---
talk_id: where-does-css-come-from
---

JESSICA:  Our next speaker is a CSS grid expert. She's an invited expert to the CSS Working Group. She's a Google developer expert, she's a book author, she's amazing, and maybe no surprise, her first Tweet way back when in 2006 was about setting up an iMap server. I'm way ahead. We will hang out together for the minute. Who here has had yoghurt?  There is more than that, because I saw the line, and I didn't get any!  So you're lying!
PATRICIA:  I think we are set. Okay, this is not Patricia.
>> I swapped.
JESSICA:  Everyone, welcome Rachel Andrew, please!  [Applause].
RACHEL:  Yes, that's me. This is my second time at CSSconf. I've done a few CSSConfs around the world now. Berlin is my favourite city. It is a non-technical talk, which is unusual for me. My comfort zone is to have 150 slides of code. I have had to write a non-technical talk. I'm going to talk about where CSS comes from. If we wanted to be literal about this, it comes from 1996. Because that is when the CSS 1 specification was published. And in the same year, we got IE3. That was the first browser which had some CSS support and very neat ly, my career as a web developer, started in 1996. I am one of those people who have had install her web browsers from CDs that were sent by the ISP. I don't know if anybody else can remember doing that?  Anyone else?  As old. We can get together and remember the good old days later. I've been working on the web for a long time, so my history as a web developer, sort of has gone along with CSS. I started to build websites without CSS because it wasn't a reality that I had version 2 browsers. There was no option other than font tags and nested tables - that's just how things were done.
And the really amazing thing about CSS - and I don't think we talk about this enough - is the fact all of those early things we built and as we started to use CSS for layout, all that stuff really still works. CSS remains backwards compatible, and that's really important, and therein thrice a lot of the problems using CSS. We can't go round breaking the web. So, I'm not really going to talk about the history of CSS today - that's just pretty well documented.
What I really want to talk about is where does CSS come from today?  Where does new CSS come from?  What is the process?  How do we go from an idea to something that ends up in a browser?  Because I hear all kinds of strange theories, and kind of like weird conspiracy theories about where CSS comes from, and I think some of that actually does have its roots back in the olden days, back in the days when I became a member of the Web Standards Project because browser surrenders were compete -- browser vendors were competing on platform features so bringing out new CSS features saying, "We've got this, and Netscape hasn't got it." If you wanted to do cool new stuff:  build for two websites. You would detect which browser the user had and send them to the right website, and this was terrible. People didn't want to to that and put "best viewed with" buttons on their web pages - that's horrible. People kind of expect that browser vendors are locked in some battle about CSS, and actually, what really happens looks a bit like this. This I took at the CSS working group meeting in Tokyo a couple of weeks ago. We were all locked in that room. No-one was allowed to go for coffee until we decided what happens to line height when you've got two fonts of different character sets in connection to each other. In that photo, there are people from Microsoft, Mozilla, Google, and several other companies, and they're all working together on a particular CSS issue.
You can have a look at the current members of the CSS working group. It is a whole bunch of people making CSS, representing lots of different browser vendors and other people. There are lots of people there who work on e-books, e-pub and outputting CSS to print. You can look at the affiliations, people who are there. Any CSS specification passes through this group. We get the opportunities to debate parts of the spec and vote on changing or adding features, and that stops one vendor or one party dragging a specification away from what would benefit the web as a whole.
And these specs have to start somewhere, so they come from all sorts of places. They often do come from a particular browser vendor in order to solve problems that that vendor thinks are important, and they may be problems that they see in their business, but it is not just browser vendor. The CSS Shapes spec started life with Adobe and others come directly from the working group because they will solve a problem we see or we need we need to do a certain type of thing to enable something else, and those specs might come directly from the working group. So I wanted to take a look at this process, and I thought I would do that via CSS Grid, because, if you know me, you will know me that I'm a Grid super fan and been working with the spec for a long time if I know the history of this specification, so let's talk about CSS specs via Grid and what happened to that and how it became something that we could use in browsers. So, how did that start out?  Quite a long time ago. In 2011, we got a first public working draft. Now, if you go and look at that document, you will find that a lot of the concepts there seem pretty familiar if you have used modern grid layout. A lot of the features are outlined in the spec, they might have names or are different, and things are vague around the edges, but it is kind of all there. It is six years before it made it into our browsers. We had this first draft. In fact, it goes back a long way. The ideas in Grid go back to around 2005. This is the CSS advanced layout module. It looks very like some of the stuff that's in the Grid spec, the Grid template areas, syntax pretty much described in this spec. There's a often the case with working group things:  you get these notes, these collections of ideas that may well become something we have in CSS but might just float around - just like when you're voting any product, you have these kind of ideas and you think, "Yes, that will be room cool, maybe we should think about implementing that," and it put on the back burner. It happens in CSS as well. So a working draft.
Now, a working draft is essentially a snapshot of the date of the spec at a particular date. It means we can reference it, and I can reference it saying on this date, this is the names of the properties. It is useful to have a reference of the state of the spec. Now, publication of working draft doesn't mean a lot in terms of implementation. It doesn't mean the spec's mature, it might not be finished, it might have great big hotel in it. It is just a snapshot of where the work was on that day. If you want to see where the work actually is today, you want to look for the editor's draft, and they're always linked from the working draft. Now, that's what the spec editors are actually working on right now, so that will be the most up-to-date thing but could be completely different from the working draft and any experimental implementations. It is where all the bug fixes are going.
If you take a look at that first working draft, you will see the editors listed and those spec editors were from Microsoft, so the initial Grid spec came from Microsoft. You have them to thank for the fact we have Grid at all. In addition to drafting this first version of the spec, they created an experiment implementation in i.e. 10, so grid is in IE10 and up, MS prefixed, because that is how experiments were released in those days. So, in general as specs are developed, if they've come from a browser vendor, there's going to be experimental implementation they've done. Back in the day, it was pre-fixes, and now they tend to be behind flags. These give you the chance to play around with new CSS which is really important, and I will come back to that in a bit.
The experimentation allows the vendors and the working group know whether this is something people are interested in and start to look at the problems that might be in that spec. It was where my journey with Grid layout began with this experiments IE implementation.
IE10 featured a lot of the features in the spec - not everything - but it was enough to make me realise this is something that we wanted. What I also knew, through having followed CSS for such a long time, was that new stuff often needs someone to promote it - it needs super-fans to say look at this cool thing because it is through that that interest is gauged and we can get this stuff into all our browsers. I thought I'm going to start talking about this, telling people about this spec and use what I knew about teaching CSS, because I've been teaching basic CSS since about 2001. I will take what I knew about that and apply it to this thing that was experimental and start talking about it.
And, while I was doing this, the spec moved on, and for quite a while, I was talking, standing on stage talking about something that didn't have a browser implementation because spec was different from what was in IE10 but we didn't have any new implementations. And a half ly, that didn't last too long because it was kind of hard making up how this stuff might work, and we started to get an implementation in Blink and webkit which is done by a company called Egalia and actually sponsored by Bloomberg. Here's a little bit of CSSConf history. The first time I met the people from Egalia doing that implementation and someone from Bloomberg was here at CSSConf in 2014 where I was talking about CSS grid layout. I was nervous when I realised they were all here because I would be talking about the work they were doing and they were going to be in the room. It was very scary. It was nice to meet them and we chat back and forwards on twist and things, and I've been in touch with them of since. It is also interesting that Bloomberg sponsored the development of CSS in webkit. They want it for the embedded chromium inside their terminal product, so they wanted that platform feature and by sponsoring it as an open-web feature, we all get it and they get what nerve for their business. That is very interesting. Boom  Bloomberg has sponsored a lot of business for CSS and JavaScript to be implemented into browsers. ... and we were starting to work with those. And I was presenting about Grid and talking to web developers, like people at CSSConf and something came up over and over again.
It was this:  there was no way to create a gap between tracks in the grid. People immediately looked at Grid and said, "It is a bit like multicolumn lay-out." Why don't we have something like column gap in Grid?  In the IE implementation, it was annoying, you didn't have gutters. You could skinny tracks in your grid and use them as gutters. The new specification had this idea of autoplacement so you could define a grid and then throw a bunch of content at it and Grid would auto re place it like Flexbox where things are placed one after the other. With no gutters, you couldn't use autoplacement because Grid would try and place items into the skinny tracks, so that wasn't ideal.
So I was talking about this on stage and saying, "This isn't great. Web developers are talking about this and saying we need to have some kind of gap between our tracks." Which led me to discussing the issue with people from the working group, and one of the spec authority wrote the feature into the spec where it was implemented and became part of the level 1 spec which meant that a bit of code like this with those ten-pitch he will gutter tracks could be simplified and would end up looking like this. The thing about this is, that's one thing that went into the spec that I remember and I was kind of part of, but the important thing about that is that that was feedback from the web community making its way into a CSS specification, because we were playing with an experimental spec we were able to make changes to the spec. At the time, I wasn't a working group member opinion I've only been a working group member for about a year. I wasn't a working group member and I was talking to other members and we were able to to make a change to the level 1 spec. We can do this with any new bits of the platform that we are interested in.
So, we've got a spec that's kind of in this state, and it's changing, and it's becoming different as it is moving along, and browsers are implementing it at the same time, so we've kind of got a spec and browser development, and things are changing in the spec and the browsers are having to make changes because of that and that's kind of how a lot of things happen in this circular way where we get an implementation, and we get the spec developing alongside each other. It is certainly not a case that the working group sort of hide in a room, develop a specification, throw it as browser vendors and say, "There you go, good luck with that." This thing happens in a circular way.
This iterative development that's happened for a very long time with specifications, but as many people know, this has bitten us in the past. If you try to use early Flexbox, for example, in a production site and it was vendor-prefix, and you could use it in a production site, you might have a site working and then a new browser came out with a different implementation of Flexbox, and at one point there were three different implementations of Flexbox out there in the wild. Now, Grid has changed even more than the Flexbox spec did, but it did is to  so behind a feature flag in browsers which meant that no-one could use it for the production code, so we didn't have this issue of it being out there and biting people as the spec changed. So that is really the difference between developing with vendor pre-fixes, which has really gone away, and developing with feature flags. It is enabled the spec to change and to have this iterative process of browser development and spec development without that then sort of getting into our sites and causing us problems.
So it took until 2016 for the spec - for the working group to say, "We think this is probably done." That's quite a long time. It's a very, very big spec, so things, when the working group thinks something is pretty much done, it is voted to become a candidate recommendation. What that means is the spec has moved on from being a working draft, and the working group thinks this is time it needs to have implementation experience. We think this spec can be implemented, we think it is useful, it does the things set out to do. Do we have implementation experience?  Have vendors implemented everything?  And the next step will be a proposed recommendation, so this is like saying, "This is what we think is going to be the spec" " and we need to have two independent interoperable implementation of the features. We need to have two browsers that have implemented the features and not only do we need to have two browsers, the work needs to have been done by two different people or groups of people; so the work done by Agalia say in webkit and Blink wouldn't really count as two implementations. They're two different browsers, they're pretty much the same code. I think ground was broken on that before the project is forked, but it is the same company doing the work, and we've got the work in Firefox. Because we've got the work in Firefox done in a different team, we've got different implementations. Hopefully, Grid will be able to progress once the bugs are worked out and the features implemented, Grid will be able to progress on. The reason we have this requirement is that it makes sure that we don't have things that are - do we use recommendations only implemented in one browser or perhaps could only be implemented in one browser because of the way that browser worked?  Something you might see in the spec, if, in fact, you look at the current working draft, you will see that something called subgrid is marked as "at risk" in the spec. What this means actually in the current editor's draft, subgrid has been removed, pushed to level 2. This at-risk flag means that it is a feature that we think might not be able to be implemented by two implementations. It might not be in a state that we can actually get that and move the spec on, so we flag it as at Rick at present that doesn't mean the thing will never be implemented, and, in fact, subgrid was discussed at the last working group meeting, we had a break-out session on it, very much on the cards, but it's been moved into level 2 of the spec rather than dropped, so essentially moved into a different release of that bit of CSS. Just like you might decide that a certain feature of your product is going to get bumped into another release so you can ship the stuff that you have been working on. CSS works pretty much in the same way.
So, March 2017, we got Grid in all of these browsers, and Edge have also announced they're going to be update too.
So it took a very long time. It took almost six years to get Grid into browsers, so why on earth does CSS take so long?  It's partly because there are a lot of stakeholders. It needs to be implemented in browsers in a way that's not going to cause problems, performance problems, accessibility issues.
And behind every browser is a business and they're going to have different priorities. - to get that implementation in the browser. We've got Grid because Microsoft thought it was interesting to start with, and Bloomberg were willing to fund it into other browsers. There is also us, authors, the people who write CSS. CSS has to make as much sense as possible to web developers because if something is just too complicated or crazy, people might not implement it, might not use it and there is no point in having that CSS at all.
Introducing this talk, I mentioned how amazing it was that CSS doesn't break things, it is back wards-compatible. This is really, really important. It will come as no surprise to people in this room that some of CSS is a bit suboptimal. So behold the list of things that we are going to fix in CSS just as soon as someone has invented a time machine!  So, if it seems that some CSS is really, really weird, doing a bit of digging, might just turn up why it is so weird, which at least will confirm that the CSS working group aren't just trying to make your life hard but also by understanding why things seem really weird. It can help you understand and remember that. It may be that it was added a long tile ago and we didn't know the web was going to be like this but maybe because they are new and had to cope with something added a long time ago when we didn't know the web was going to be like this. Sometimes they're weird because you - sometimes it is weird because it has to cope with languages that run from right to left, top to bottom, as well as left to right, so there is lots of stuff in CSS that helps you figure out that issue. But what is really important is that you can help to influence the direction of CSS far more than you imagine that you can. You can do this in a whole bunch of ways. I'm going to cover now. As one who is just a web very, running a tiny company, I'm not from a big browser vendor or with and I'm on the working group, the thing I like to do is take people's feedback to the working group, take other web developers' feedback and take it to the working group. Here, everyone can be doing that.
One of the simplest ways to get involved is to go to browsers and ask for features to be implemented. A lot of browsers have got official ways of doing this. Go and use it. Vote for stuff. Post stuff up. Tell browsers that you want stuff.
Even more important is to start using things, especially if that stuff only exists in one browser at the moment. Browser vendors are tracking usage of features to see what the demand is for the feature.
So here you can see the usage of Flex. This is on Chrome status. They are tracking to see how often this stuff is used. Microsoft have got a similar data-gathering effort. If you use a feature in production, even if it is just on your personal site, and even if you have to do a fallback for other browsers, that is noted, and it's like people are wanting this because they're using it. For things that are tucked away behind browser flags, using them in production is impossible, but another way to show interest is if you write or talk about this stuff. Write posts on your blogs. You know, talk about the thing. Do presentations at meet-ups or whatever. This photo is a screen shot from events party in Seattle when Edge announced they were going to update their Grid implementation. They responded on stage to an email I sent them in 2014 chasing them up about updating the IE10 implementation. Browser vendors are listening. They want to know what we want. Make sure they get that message.
It's not just about speaking to browser vendors. You can actually take part in developing CSS itself.
You don't need to be a special person. You don't need to be an expert to the CSS working group to get involved. We need designers and developers to take a look at new stuff, to make suggestions about things we haven't solved yet in CSS. Everything that happens at the CSS working group happens in the open. So you can follow along with what is happening and you can make your own comments. The specifications and issues raised against them are held in GitHub in the working draft repositories, so you can but and have a look at that, see what issues have been raised, comment on them, and you can raise your own. The status working group is on Twitter and things we are working on, and direct questions are often posted there, often about naming, what shall we call this property?  We don't know and we're asking for feedback. You can also see all of the current work of the CSS working group and see if there is something you want to comment on. Feature request for CSS. You can request those for the same way it asks for any feature of a product, and the best way to do that is to come up with a use case. As opposed to proposing syntax, the syntax is very, very hard to work out because it has to cope with this old stuff and legacy stuff and often we go around and around on names quite a few times before it is decided what it's going to be, but the use-case is the important thing. You know, what problem are you trying to solve with this CSS?  And are authors already working around this in some way?  A lot of the time people are doing things ... to do in CSS. If we've got that JavaScript implementation, then that's a really good test case for how do we actually do this in native CSS?  That is really useful. If using JavaScript to do things isn't a bad thing, but are there problems because of that use of JavaScript?  Is it creating a performance issue that perhaps we could solve if it was part of CSS?  So that sort of stuff, if you can bring that into an issue on GitHub, people are going to look at that and they're going to talk about it. We bring these things up in working group meetings, talk about them and see if there is a way they could be solved.
As an example, you can go and have a look at, unof the things that happens is people look at CSS grid and say, "Can I just style the backgrounds of grid areas?  Can I style column tracks?  Add borders to them in" the answer is no you have to put an element in there to style them. It is creating containers for elements, so we need some kind of grid-cell pseudo element so you can style the outlines and borders. It is something that has been put in as an issue and people have commented on that thread if you're interested in, you can go and read and see if you've got anything else to share. This is how new CSS is happening. People are asking for things and we are talking about them and trying to work out the best way of doing that, so that will probably be a level 2 feature. You can see it has got a CSS grid 2 tag on it so we can keep track on it as we start to look at the level 2 of CSS grid layout.
Now it is not just about few features:  there are bugs in specifications. The CSS specs that can be long and complex and they can end up with bugs in. If you spot an issue, come and raise it. If it turns out it is not an issue, it might be that we need to clarify that bit of the spec because what someone thinks is in the spec is wrong. That's a bug as well because we want the spec to be clear, so come and log issues against the specs. And web browsers, they would be very happy to happy about I know the op issues too. You can log bugs in any browser. Tell help about it. It is often when people get their hands on new CSS they start using it with other CSS, is that right  start using it with JavaScript or in conjunction with a framework and that shows a bug that no-one has spotted before. Go and log them. That helps everybody. You learn this great thing when you log bugs:  you learn how to make reduced test cases which I believe is a web development super power and not enough people are got a enough add doing this. It makes your life a lot easier if you learn how to make a reduced test case, not just for logging bugs but for fixing problems in your own work, getting good at obstetrics and gynaecology down problems, the simplest case really makes everything that you do an awful lot easier and it will help other people to reproduce your bug and to fix it quickly.
The thing is what I've found is that contributing to CSS has been an amazing way to learn about CSS. What I've learned in the last few years following the grid spec - I  is it and since becoming part of the CSS working group - has been amazing, and I've been doing this for 20 years, and I feel like I've learned so much. You know, I contribute to CSS, I spend a lot of time doing free work essentially for the web platform, but I think we are pretty much evening because it gives me so much back in terms of what I've learned as I've done that. What I've learned by raising an issue and then having all of the implications of that explained to me. I couldn't have got that anywhere else. I've learned so much by contributing to CSS. It has been very much worth it.
So, really, to answer that question where does CSS come from, where does modern CSS come from, there's absolutely no reason why the next amazing feature can't come from any one of the people sat in this room today. In very real ways, CSS comes from people like you and me, so be part of it because it is great fun. Thank you very much for listening. You will find lots of resources at that link there, and you can find me all over the web, Andy love talking about this stuff, so please do come and have a chat to me. Thank you. [Applause].
