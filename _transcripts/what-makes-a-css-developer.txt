---
talk_id: what-makes-a-css-developer
---

IVANA:  Thank you very much. Is there power?  I'm not nearly that creative. I'm not sure to say while ... . Excellent.
Hello, thank you so much for having me here. I'm incredibly intimidated but I will try and get through it!  A little bit about me:  my name's Ivana. I work at a company called Customer.io, based in Portland. It is a remote company so I live and work in Vancouver in Canada. I was born in Bosnia, though, raised in Croatia, lived all over Canada, and then spent several years in Scotland most recently. I have a degree in psychology and neuroscience but realised to late I didn't want to be an academic. I'm now a UX designer but I've worked as an interaction designer, a freelancer and front-end designer, and I have the pleasure of CSS being involved in all of those things. So, over time, and across countries, I've made lots of internet friends and real-life friends, and, as a result, I've always been really into how we build our communities on the web, both socially and from a code perspective as well, and how those things interact. Now that you know a little bit about me, I want to ask you guys:  what do you do?  What do you call yourself?  We don't often describe our roles in one word because we know that there is usually not one succinct title for them. We context ise those jobs with what we work with but we have no common language for those things. Front-end engineer, for example, might mean something different to me than it does to you. Someone saying they're a software developer doesn't tell you initially a lot about what they build or what they used to build, but we simplify, right?  We contextualise and categorise because that behaviour makes our lives easier, makes the world easier to compute. This categorisation can harm our communities, too. Because how we categorise is based on what we value. How we talk about our profession, CSS, that matters. That's what I want to talk about. To do that, we have to go back to the beginning. We have to re wind a little bit.
          It did start this way:  CSS fit very easily into that kind of design appearance bucket. There is a clear separation between design and development. You had a web designer, and now you kind of have designer and developer, like visuals being one thing and code another. You can sort of see these lines building. But the web is growing in so many ways, right?  You know, not a day goes by that we don't see a piece on medium, and I'm sure I've written a few, on how designers and developers can work together best, and the reason we do that is because the lines between them have blurred so much that we don't even know what makes a designer or what makes a developer, because the web isn't just a screen, we don't build a website, we build an application, we build interfaces across devices and contexts, and interactions are more dynamic. These experiences are more immersive, and this needs a wider variety of skill sets.
Like this is awesome, right?  Because as the industry grows, so do our capabilities. So our roles and our skills, we can generalise or even specialise; we can focus on CSS as a whole, or just on one small aspect of it. And this is really cool. We talk a lot about how we should work together, how we can make development and design work together, where CSS fits into that, and where we fit into that. And yet, we may not say this like outright, of course or maybe we do, I've heard it, but the implication is always there. It is there when we ask what front-end means or doesn't mean; its there when we ask which coding language should I learn next?  And it is in job postings; it is in salaries. It is in the word "development". CSS used just to be design, so what is it now in ?  This is an issue without a resolution, and that lack of resolution has consequences.
We have so much fluidity in our roles, and that's okay, but we need to produce software at the end of the day, and the titles that we hold matter, because they impact so much - hiring, team construction, perception, pay, not to mention the actual experience of what it is we are building.
And so now it's not so much about developer and designer because we don't build web pages now. The above simply isn't the case any more. It is not just fonts and colours, and CSS is code, but not development. Why?  We say that language is like HTML and CSS are about presentation whereas programming and development is meant to describe function, and this was very convenient, but CSS has grown a lot, right?  We have pre-processors that require developers capable of understanding, just to implement and use meaningfully. Like if you looked at some of the docs for these things, it's like for a beginner trying to walk a beginner through some of it, "Yes, just fire up a terminal and all of this, all these dependencies", but that's not development, right?
Anyway, we have transforms. We have complexion targeted selectors like pseudo-elements. If you think about that name, it blows my mind a bit. Like pseudo doesn't exist, dynamically populated. We have object-orientated CSS layout now, and the point of all this is to show that it's not just presentation and function. The code might look really simple and people might say, "It's just CSS", but interaction and presentation enable to function. CSS bridges all of that. It touches everything, and expert-level CSS is a key development skill.
These days, like I was mentioned in the intro, people are showing off, which you can do with CSS. You can say it is just design, aesthetics, but that's missing the point. The implication of doing things like this and just CSS was crazy a while ago. Whole games can be built in it - I believe later today, we're going to learn how to do that - and this is an example of something that a friend of mine created. It is a CSS framework, but it is made up of self-contained modules and it's developed in a way that draws from JavaScript and from Ruby. Dependencies are managed, imports specified and because of its modularity, the CSS can actually be tested. Also, last night we speaker drinks, several sort of folks who work primarily with JavaScript said to me, "I don't do CSS. CSS is hard." I'm like, Rachel one of my fellow speakers said one of the most complicated things I do with CSS but other more "developer" tasks have more legitimacy attached to them.
And even if you do subscribe to the whole "CSS is just presentation", fine. As I mentioned, presentation influences the way people feel about software. It enables successful interaction. If something isn't presented and can't be interacted with in the right way, its function is irrelevant. There need to be people who stand at this or who code, I suppose, at this intersection of interaction, function, and presentation. Because of how complex the web is, they deserve their place in development.  That brings me to the main point of my talk.
We are struggling to sort of delineate design and development environment of language to give those things value and find out where we fit while struggling with sort of bias, and archetypes, and what happens when these definitions of development and CSS are unclear, unspoken, and, like, tied up in these complex perceptions of ourselves and our competencies?
Hierarchies are about drawing lines, they're about identifying differences and similarities, and then - this is the important part of hierarchies - assigning them rankings, assigning them relative importance. This let's us categorise and compare things relatively speaking. Things like languages, the languages we speak, are organised in hierarchies, so colours, evolutionary trees, but the kind of hierarchies that I'm talking about here are value-based on power and authority in a CSS context.  And in general, we draw them because we like to know that we have a place in society within our communities. We like to know where we stand in relation to our others; we're happy when we identify with a group, a sports team, orphans of a CSS framework, for example.
 We are also happy when we don't identify with another group. This is social identity theory. We define categories and then we compare. We are here because we value CSS and identify positively with those who have that skill - this conference wouldn't exist otherwise. On some level, these things are good. Like I said, they help us process the world faster and understand how it interacts. Socially, they help us be less overwhelmed by the world. They help employers apply people for the right jobs. Somewhat, and when we're in those jobs, they help us get our work done. If we need help, they let us know who to go to. They can also be bad for the reason I mentioned earlier and who defines that importance?  So, let's think about why for a second. Who defines this?  Like if I ask you to put some things in the development area and other things not in the development, where would you put them?  What about the person next to you?  Or your co-worker?  I would venture to say those things wouldn't be the same. The fact that they wouldn't be is is what I want to address. Because, if you're hiring someone, you need to decide how much to pay them. How do you do that?  What do you decide first?  Do you decide the technology stack of the job?  Maybe the experience?  But we don't even know what that means for a given language, especially if it hasn't been around that long. We're categorising and determining someone's value before they even exist, and these hierarchies that we have in our minds, you know, the hiring manager, the engineer is the person that will be working, the designers they will be working with, these all differ in subtle ways and these ways then compound, and this impacts who you hire. A CSS developer, for example, might be what you need, but if you don't identify that as a value development thing, you won't hire that person. And this is something that find interesting:  in Stack over flow developers' survey, they didn't include CSS as a language any where but at least they're open about it. I think the only valuable hierarchies are clear, transparent ones. It is the lack of transparency that is the problem. We're not drawing these hierarchies between skill levels like manager and junior - that's its own thing - but across languages. We are building tacit value-based hierarchies based on languages that are biased by our own investments.
Of course I'm going to value CSS higher than Amber or whatever because I've invested time and money into learning it and I love it, but I can't assume that the person next to me feels the same; or if even that is what my product needs.
So, what is the point?  What are we trying to understand, trying so hard to understand what makes a developer anyway?  Because we need to, we are compelled to, in order to make our world easier to understand. But also because these hierarchies affect CSS, the language, the community, and the web.  Tech is changing so fast that we have no like agreed-upon standard for what a developer is. There is no degree or certification, whatever, and we pride ourselves on that. Anyone can jump in and get a start in it. I learned development on, like, Neopets, if anyone remembers that. It is a double-edged sword because at the same time we're trying to make sense of how to pay people, how to hire, and how to make software. Knowing we haven't figured that out is fine but I would argue the way we're going about it, this implicit value-building based on, like, outdated assumptions about CSS, that's wrong, because there's a gravitas to the word "developer", like a technical proficiency tie the up with credibility that, for some reason, CSS just doesn't get, and instead of critiquing that association, like we're worrying about where to draw these lines.
And the problem again isn't that these hierarchies necessarily exist, but that they differ subtly, based on the company, the person, the job post, and then those reading that information are left trying to infer these categories, these hierarchies.
And because we're not clear, we are not clear on the hierarchies, we strip them of their effectiveness. If we don't come to the table with a shared understanding of development and how CSS is a part of it, we can't clearly communicate what we value. True hierarchies, good hierarchies are clear, they're unambiguous, and, if not, we leave the door open for changing interpretations of value, and we leave the door open for bias, and this automatically skews in favour of a certain archetype, and I will talk more about that in a minute.
Like I mentioned, this might be a joke, right, but it is repetition is damaging, because it becomes implicit, it becomes an assumption that we make going in and don't question any more. And to be clear, I'm not saying that there isn't a difference between, like, CSS, HTML, JavaScript, and languages like C - I'm not saying there's not a difference - but what is dangerous is the power dynamics, and subtle implications that one is harder and therefore better than the other.
And the creation of archetypes around them. This becomes ingrained. It leads us to make bad decisions and treat others poorly in some cases, even when we don't mean to. In the same way that categorisation makes it easier to place people in roles, it also makes it easier to devalue people, and saying CSS isn't really development or some variant of that, takes away from what I think is a thriving debate around where CSS is going, and what it is capable of.
We don't talk about it. I don't know how your hierarchy difference from mine, we won't come to any consensus. This is implicit but the problems manifest explicitly. The developer archetype, and you know what he looks like generally, is how this implicit value-based programming language hierarchy intersects with a biased social one. This developer, male, usually - sits implicitly at the top of the hierarchy and doesn't write CSS. And to illustrate how this intersection becomes complicated, think about how it might manifest when sort of a white many, quote unquote, CSS developer and a female "CSS developer" of colour apply for the same job. What hierarchies are applied to those people?  What we don't - when we don't know or we're not tans partner with it, we do reach into our subconscious for things we do "know". Then, what that knowledge is already wrong, that of a particular archetype being a developer and good at computer things, we shoot ourselves in the foot. It means that we compromise CSS, the people who use it would be and develop in it, and we compromise the industry by leaving out people that can actually impact it the most. And, furthermore, woo we are sitting at the hiring table and we don't hire any CSS developer at all because we don't value CSS as a development skill, it impacts the web even more.
So just a couple of examples here, and I think this points beads belabouring because it intersects with how CSS perception interacts with the social and prevents people who end up lower in these hierarchies through no fault of their own in participating in our community and contributing to CSS development, and then CSS development contributing to the web as a whole. This is complicated. There are so many hierarchies here, and what we - which groups we arbitrarily assign to sort of high and low status, that we just kind of accepted this and we've done very little to change it.
And beyond that, beyond archetypes and social intersections, whether or not CSS is defined as development has impacts on how people see our skill as technicians and as builders of the web. For example, JSConf has twice as many attendees as this conference, and attracts about five times the sponsors for it. Of course, a lot goes into that data, but it is experience sort of suggest that recruiting and conference budget related to CSS are much smaller compared to what is spent on JavaScript.
So, if you develop CSS, but don't know Amber or something, are you more skilled or valuable?  Or less?  Why?  And who says?  Are you worth more money or more credibility?  When we perceive people as more as I would  skilled, we give those people power. These power dynamics are tied up with assumptions of legitimacy. Until now, it's been the assumptions of people in power, people with privilege, that govern these perceptions. Like, we want to say that legitimacy, development legitimacy is a meritocracy but it is not, and we know it is not. There are implicit valid ways to be a developer and CSS isn't yet seen as one of them. I believe it should be.
This perception of developer legitimacy is really important for minority groups and the under-represented as well because these implicit structures take power away from those who should have it and prevent them from contributing to development to the web to the experiences that we are building on it. And, in the office context, people are excluded from meetings or co-reviews based on perceived language value and expertise and their input it lost, even if they were invited to begin with. One path into investment isn't better or more deserving than another.
And this then leads to arbitrary pay scales. If I think development is worth a lot of money, but CSS isn't really vehement, then it stands to reason that CSS isn't worth as much money, and then if the person doing that CSS development is a member of a minority group, we will pay them even less. This is a problem, again, and if our attitudes and language-based hierarchies become value-based and vary from person to person, this negatively impacts individuals, communities, and the forward momentum of languages and CSS especially. And this has consequences on our mental health, because when you see someone is less valuable, even in something as simple as which language they choose to code in, you will behave differently towards them, and just because you see it as a joke, doesn't mean someone else does. For example, a front-end designer who works with CSS every day might be as I mentioned excluded from a meeting on a piece of critical functionality because they're not a developer. This has consequences for them personally and professionally, and not to mention for the product they're building for the site that they are building. That brings me to when these applications are built, a devaluing of CSS impacts them too.
When we give this value across languages, we don't bring on the developers that we need. And this is also from the Stack Overflow survey. Popularity means the most commonly used, and there is wanted as well. So, like I'm not taking issue with any of this, and I'm really happy Stack overflow do something like this but should the standing of a particular language here influence how people see our competency?  Probably not, but for CSS it does. I saw this yesterday on my way here, actually. When we as a community devalue a dev skill, performance suffers. When we devalue CSS as a dev skill, the web suffers as do its users. As CSS splinters into its own sub disciplines and specialties, we have to be aware if other own hierarchies as well and how that affects our own community and how we can best mitigate that. So, what can we do?  I'm not suggesting that we get rid of this, or try to get rid of this fundamental human behaviour because hierarchies are fine, they make us feel safe, but they need to be transparent, enforceable and concrete. We should feel comfortable challenging them. There are differences between languages and you  but we can identify and understand those differences to use them to bridge skill gaps and solve problems.
So, if something is implicit, we can't fight it. If we don't know we disagree or are afraid to admit it, we can't make things any better. Individually, organisationally, we can ask ourselves what our hierarchies are. We can write down or somehow record what we perceive to be a developer, and don't just ask the question, answer it. And answer it openly. If we're scared of people having more information, it's a good sign that we are doing something wrong.
We can be hyperaware of our own biases and hierarchies.
[Sound cut].
>> Ivana's was about a font. It wasn't Helvetica, know, it was very, very nice.
>> I thought we were going to show it on the screen.
