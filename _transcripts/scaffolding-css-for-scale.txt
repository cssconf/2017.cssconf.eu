---
talk_id: scaffolding-css-for-scale
---

SAREH: ... so it is a React and service side, so a new front-end, CSS framework. So, going to start with a little bit of a question first off:  how many of you have ever visited the BBC news website?  Hands up?  Cool. So that's pretty much everybody!  Hands up in you've used it in the last week?  Okay. Cool. Fewer, but still a good number. Cool. Just to give a bit of context, you're not alone. There are 56, 76 million weekly visitors to the site, and actually, what surprised me when I first found out, two thirds of them are from outside the UK. So I found that pretty surprising first time when I was looking at the site.
Another question:  how many of you have ever visited one of these World Service sites?  Hands up. Okay. I think one or two. Some multilingual people, maybe. These sites, these are all separate news sites. There are around 29 XML. 29 different sites, they have different languages, different news agendas, the stories being shared on them. What is cool about them is they all are based on the same code base like the English news site.
This is the Spanish language site. That's got around 16 million monthly visitors. Around almost 60 million monthly visitors to those different language World Service sites. What is pretty cool almost all of those, 99 per cent of the users are actually outside the UK. Interesting challenges there.
We're going to launch a few more sites very soon, this they are in the south of Asia, and lots in Africa as well, areas where we have lower bandwidth connections. So, really, really interesting challenges in terms of scaling to different regions.
Then generally, it is not just BBC News and World Service, there's like other services so that BBC kind of offers sport and iPlayer and things, then there is this high target to get to 10 million users worldwide, so within about five years or so.
So, yes, huge numbers, kind of difficult to kind of put them into context, so, that's going to be enough of just the big statistics, really. I'm going to, like, go town to what that intro is really about. Lots of you ... using things, so, as you can imagine, lying having lots of those sites, it doesn't make sense to rebuild everything for all of those things. It would be a maintenance nightmare, really. As much reasonable ability we did get in our systems, the better. We want our sites ... make them lightweight especially for some of the different regions we're going into, outside of Europe and outside of the US and things, that have slower connections that we can ensure that our pages are able to get to them as fast as possible. ... you might be thinking, all right, I'm not actually working on a big site, I'm working on a ... relevant to you. How is this talk going to be relevant?  Well, I think like the last three are relevant to ... thinking about kind of in terms of the lightweight, it is like who doesn't want a site that loads fast?  That is a brilliant user experience, really. Those are the two, I would say okay, specialised, but if you're thinking the next billion users are probably going to be in different regions why wouldn't you want to write some content outside of user services in different languages?  And the reasonability, we want to make our lives easier. We don't want to keep building the same things over and over again. If we can reuse, it makes things better. So, like ... the examples I'm going to be talk about are the BBC News site. There will be things that you can take away to whatever kind of size of project you're working on, even if there is a hobby weekend thing as well. I'm going to introduce grandstand. It is the CMS framework we were using built by the team BBC sports, so separate team, ... [sound cuts] live updates to sports events, so you can ... the news, and things like that, so we're like, okay, it is used really well. We should think about using this.
So I will talk a bit about the ins and outs of grandstand and how it parse s CSS for us. And touching on that, how do you go about building your own?  Yes, so, how would you, where would you get started?  Can you pick up grandstand and use it or do you need to start from scratch?  That is the topics we will talk about soon.
So, Grandstand, yes, this is an intimidating list, I should say. You don't need to know it. Pretty difficult, one starting out to understand like lots of these abstract concepts.
 Instead of just trying to go through them one by one and just talking about the theory behind it all, I thought I would start off with examples. I find it easier to understand things with examples. This is the front page of the BBC News. On some desktops, there's a bit more of it in the screen, really. This one is like a live pulse, on the live side. It has got CSS animation. The second one is a timestamp. A clock icon. When the story was last updated, and finally, like a media ... icon. And the heading. You might look at these and think, all right, these are very different, like the different colours, like different ... there are different icons, too. There is nothing really similar, is there?  But actually, if you look kind of a bit closer, you can actually see the under the hood kind of thing. Similarities here. So, for example, ... to the left of that, there is an icon which is exactly the same height and width of the text and a bit of the space in between them. So that is a very similar. So there is like different components because they're not identical, different stylings and things, but they have similar base pattern. So we can actually use that. We can actually extract that out into like a bullet pattern. It's called the bullet pattern because Bute points and things that kind of reminds you of like Word documents, bullet points and all that kind of thing. Yes,. A block much text, an icon with the same height of it and space between them. It is pretty simple but it's been used in multiple places. Actually, this is the kind of - this is emblem attic of what this grandstand framework allows us to do. It separates out the abstract itself. We want to make  make sure that these three components look pretty different, we don't actually repeat the CSS from the structure all of the tile. We pull out the common parts. That's the whole list of everything in grandstand, and actually, the bullet pattern we just looked at is an object. It is the basically it. It false under object and there are 11 different objects ... because I think the bullet pattern is just automatic so it is one that is a flag with an image and a text in the middle, and because we know we don't want to centre align everything all the time. Before we go on to the next subject, I want to have a look quick aside that in grandstand, we want to namespace all the things. What does that mean?  We want to namespace the classes. We don't want a conflict with a class, because do we know every single class name in existence on our pages?  Maybe you do - that's brilliant - but working in a big team, I say that I don't know exactly every class team member has written. This is actually namespacing really helps. So, gs-. This is the start of our class names. Because we are dealing with like a bullet pattern, which is an object, we actually prefix it gs-o. When you look at the class in the expect er or something like that, you know exactly what it is, it is a bullet, it is an object. We actually use BEMS so there is a gs-o and a gs-o underscore text and that's how it buildings up. Those are our objects. What else does grandstand have approximately what else can we use?  Another set of classes called utilities.
It's a gsu, all the classes start off with gs-you, and this includes everything like margins, padding, floats, displaying with all of that. Why do we need to to that?  Why not write a margin right 15 pixels?  It's really straightforward, right?  Well, what we want is to standardise things. So, for example, for margin right we've got gs-you-mr. When you add the gs-you-mr to the live pulls section, you get the original margin. It is straightforward. It adds you to there. You don't need to write custom CSS for this particular component to do that. And likewise, I mean it doesn't look the best idea, the design here, because I wanted to show the same example, but if you change the gs-you-ml to a margin left, it puts the same margin on the other side. That's how you can kind of look at them. So that is just margin, but they have the same kind of set up for padding, like padding top and bottom, display block, dis play none and all of those as well. All the things that you need to get running, really. Those are the utilities. Now Sass tools:  grandstand isn't just like - it is actually Sass that we - and, so, what are the Sass tools?  They have like colour variables and things so we have like ebon which is like dark, very dark grey, and we also have mixins which I will talk about later and how they are relevant and how they are useful. Particularly related to localising our grids and things.
So, okay, there are Sass tools and three other sections, parts of grandstand. They actually aren't like part of grandstand that BBC has built up, but you can see there's gel-typography, and gel-iconography. This is experience age decided across the whole organisation - news, sports, iPlayer, music, all of the big products that the BBC has decided on like a shared typology, a shared grid system, so there is continuity between the sites, and, yes, so there is continuity throughout the kind of BBC experience, so to speak, so that is what GEL means - global experience language.
The typography. We've got a set of - the UX teams have got together and created a set of typography you've looked at different design systems and things, the size, the pixel sizes and the line heights change at different break points, so to enable you if you're on a mobile to have a large enough - a larger kind of size so it is clear, whereas if you're a desktop, you probably want it smaller, so, there are a lot of work that has gone behind the scenes to set this up.
There is a Gel grid. It is like a percentage-based grid so one column, two columns, et cetera, and we've got set gutters between them to make sure that all of our grids look like uniquely placed. And Gel iconography, svg icons shared across the board. This is a small selection. There are all sorts of different ones. Every sport imaginable has an icon that BBC Sport uses. In news, we basically only use some of these.  Okay, so that was a whistle-stop tour of different parts of grandstand. I talked through them in that particular order because I think that made more sense in my head anyway. But actually, what grandstand, or the structure in grandstand is that you pull in all the Gel foundations - so the grid, typography, iconography - first, and then you have your product-specific things so the objects and utilities after and your Sass tools. That's the kind of hierarchy of items, and there is a much, much more detailed write-up of why this is kind of like the inverted triangle CSS and Harry Robinson has given numerous talks on that, so I would recommend to share the slides and notes of that to explain why a particular hierarchy is needed when you're parsing it in.
So we've talked about all of these separately. Okay, the typography classes and all these sorts of things. How do you actually build a page with them within build components that you need to make the site look good?  You need to first make sure these classes don't really overlap. Because if you have lots of classes that kind of do the same thing but kind of overwrite each other, then you just end up with a little bit of a muddle and it takes a while for all the specificity stuff. Try to avoid conflicts of specificity as much as you can, so just go with things and classes that don't overlap. When we actually implement them, you can add these kind of classes in different combinations to build up your components. What does this mean in this is an example headline, for example, font, to the gel-Waterloo, the typography, the gel-Waterloo, the bullet pattern because of the bullet icon and the text and the margin right, like we showed before, there is a space there. You've got this for, say, the main heading of your main page. But what if you wanted a small heading further down?  Do you need actually to redo this component with a smaller typography?  Actually, you don't. All you need to do is replace the one typography class. You replace the gel-Waterloo one with a gel before -pica. You can use something re placing that one class. Okay, so that was about how you build up things. Now ... localising the system. What does localisation actually mean?  Okay, so you might think, okay, if it needs to be like to write stuff in a different language, the content needs to be perhaps in a different language, so you might have your navigation saying like the home button will say home in different language, and you might have a different script. You might have different typography if you're writing. So, for example, the BBC Arabic site has an Arabic script. That's different. And layout. You might think why does my whole layout need to change?  I would just rather have one layout for it just to work for everything. Well, that's almost true. You can do that in lots of different circumstances. Except some languages are right-to-left and not left-to-right and you might have hard-coded margin left everywhere!  What do you do if something like that changes?  How can you contain it as a property?  How can you handle that?  I will talk through the different issues here and how with grandstand you can solve them. Okay, so, first of all I will show you what the result is. So these are like slices of content, so the top one is in Thai and the bottom one is in Persian, and you can, for all the different type of products that we have, the World Service sites you can also create slices. You might notice that Thai is left-to-right so it has the heading there and the Persian one is right-to-left. They look kind of the same under the hood, but they are slightly different, and let's talk about why. So, the first point on localisation was typography. Why?  Okay, so let's look at these two examples - one left is in English, and the one in right is in Persian. But they have the same font size, they have the same line heights, they have the same ... both languages, you notice that it is actually much harder to read the text on the right because of the style of the type of the words. You need to focus a lot more on it. It is really like bunched together and things like that, so, as a reader of that site, by just having the typography that works well in English and for Latin scripts with the spacing between letters and lines, that doesn't really work when you've got different scripts, so it wouldn't work with like for Arabic and things, and for other scripts, so we've got Chinese, and Japanese and different scripts that we care about.
So what do you do?  You adapt depending on what set-up you want. If you decide now I actually want the Latin CSS file, what can I do to get that right?  And if I want the Arabic script, CSS, what do I do to get that right?  So there are a few different things. So the line height, font sizes at each break point. What we do in practice is we alert developers in UI designers work closely with editorial staff, because as multilingual as some of the team are, not everyone speaks all 29 of the languages, so it is usually best to get someone from the editorial to speak the language to give their opinion on whether it is clear or not. Yes, so to get feedback on is this clear enough?  Can you see it on your mobile phone?  We localise typography.
About the grid:  what does that mean to localise a grid?  You might have noticed in CSS and in grandstand definitely, we've got direction left to right, and we have text-align:  left to make sure it is aligned to the side of that lock. What do you do if you want just to swap it so that this component works with everything on the right?  What we have used - not specific to grandstand - used elsewhere in previous iterations of the site, electrics included it here in grandstand is the split function. It takes two parameters. If the site is left-to-right, which is in most of our sites are, all but four of them, so like 25 of the sites are left-to-right, so we default to that being the main default, if it is not, right to left, so the Arabic, Pashtun, Urdu and Persian, we choose the second value, the second argument. This is a function of the whole. So it takes two values in. If right-to-left is true, we turn the right-to-left value. In all other cases, you return the first one. So just like a single "if" statement to make that work. That is really useful.
So, yes, basically, that will flip, so all of your values, you can flip them round so they work out the box. But what happens to properties?  What if you've got a property with margin right?  How do you make that work?  In Sass tools settings, you setting right-to-left as false initially as an example. The margin right value to start off with, for example, is just margin right. If it is left to right, it just flips the value around, so that value becomes the opposite stream. That just kind of works, which is cool -- opposite string. The same with margins and the same with padding. You interplate it with that syntax, so the dollar signs, the brackets, and it kind of works that way. So those are the two ways. The first one is how to interplate the values, the second one is how to interplate the properties to loam lies them. Cool, so let's talk about how it can be localisable and a bit about reusability. And it being lightweight is because we were using these classes. How do you actually get started building your own?  And why would you want to build your own?  Can't you use it out the box?  A lot of the stuff you can. Some of the colours, so you may not want to style your site the BBC News red. You might want to have your own colours. Or the object patterns. You might realise when looking at the style of designs that you want to have on your site, that you don't really have lots of icons next to text that you have, you have lots of images next to big chunks of text, or something else that you might want to abstract into a different pattern. You just basically look at what you want to use a lot, and decide what patterns are worth pulling out so that they're reusable.
So, to set up, it is really cool and really important, and really useful to set up a standard spacing unit, so no more one-pitch he will additions. This has been a point of contention, everybody slightly on board as it becomes more unified across different pages and different components, which is good.
Breakpoints and typography would be a different talk itself and someone with a user experience background would be best-placed to talk about it, but really you would want to have breakpoint that are suited to your context, so, if you've got lots of text that you break it up and there is enough - there is enough of spacing between the lines of text and things like that.
So that's like a whole art and science in itself. And your colour palette, so you don't want to be swamped with the BBC News red. You will choose your own.
Right, and for localisation, then you'll have the Sass mix variables and the typography size. You can use the ones from grandstand because they should work out the box for your purposes as well. How to make sure you right it lightweight. I think it is really important, because we start off with a system, it is very tempting and easy to just keep adding to it because you're like, "Great, it works!  Awesome. I've got this other use case, let me add this one thing. Another two months later, let me add that other one thing." It could not be a lightweight system but a pretty heavy system. So, really, the discussions to have, and I do say discussion, even if it is with yourself or other team-mates, do you really need that extra variation?  Is there any way you can use the current building blocks to get close to what you need?  And finally, and I think most importantly, is communicating. If you're a developer communicate constantly with the designers, and product, and with your users, so, in our case, that can be editorial, it can be like you as users.
Communicate with you, communicate feedback, and even if you are actually working by yourself and it's for your own project, communicating to a future you is such an important thing, and I don't think can be like overestimated enough, because you will write a class, you will add something to add IE11 support and get six months down the line if you don't add a comment next to it, "Why do I need this?  You break IE11 support! It is to our future selves to add comments throughout our code to ensure that helps onboarding as well so new members of your it'll, if you want to share your project with other people online, and that they can understand what decisions you've made and why you've made them.
So, yes, so to kind of sum up, so we talked a lot about BBC grandstand, what are the different sections and why are they needed?  How it enables sites to be lightweight, reusable and localisable with all the different components, and how you can get started with building your own. Thank you very much. [Applause].
